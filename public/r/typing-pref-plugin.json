{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "typing-pref-plugin",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "files": [
    {
      "path": "editor/plugins/typing-pref-plugin.tsx",
      "content": "'use client'\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nimport { useEffect, JSX } from 'react'\r\n\r\nimport { useReport } from '@/registry/default/editor/editor-hooks/use-report'\r\n\r\nconst validInputTypes = new Set([\r\n  'insertText',\r\n  'insertCompositionText',\r\n  'insertFromComposition',\r\n  'insertLineBreak',\r\n  'insertParagraph',\r\n  'deleteCompositionText',\r\n  'deleteContentBackward',\r\n  'deleteByComposition',\r\n  'deleteContent',\r\n  'deleteContentForward',\r\n  'deleteWordBackward',\r\n  'deleteWordForward',\r\n  'deleteHardLineBackward',\r\n  'deleteSoftLineBackward',\r\n  'deleteHardLineForward',\r\n  'deleteSoftLineForward',\r\n])\r\n\r\nexport function TypingPerfPlugin(): JSX.Element | null {\r\n  const report = useReport()\r\n  useEffect(() => {\r\n    let start = 0\r\n    let timerId: ReturnType<typeof setTimeout> | null\r\n    let keyPressTimerId: ReturnType<typeof setTimeout> | null\r\n    let log: Array<DOMHighResTimeStamp> = []\r\n    let invalidatingEvent = false\r\n\r\n    const measureEventEnd = function logKeyPress() {\r\n      if (keyPressTimerId != null) {\r\n        if (invalidatingEvent) {\r\n          invalidatingEvent = false\r\n        } else {\r\n          log.push(performance.now() - start)\r\n        }\r\n\r\n        clearTimeout(keyPressTimerId)\r\n        keyPressTimerId = null\r\n      }\r\n    }\r\n\r\n    const measureEventStart = function measureEvent() {\r\n      if (timerId != null) {\r\n        clearTimeout(timerId)\r\n        timerId = null\r\n      }\r\n\r\n      // We use a setTimeout(0) instead of requestAnimationFrame, due to\r\n      // inconsistencies between the sequencing of rAF in different browsers.\r\n      keyPressTimerId = setTimeout(measureEventEnd, 0)\r\n      // Schedule a timer to report the results.\r\n      timerId = setTimeout(() => {\r\n        const total = log.reduce((a, b) => a + b, 0)\r\n        const reportedText =\r\n          'Typing Perf: ' + Math.round((total / log.length) * 100) / 100 + 'ms'\r\n        report(reportedText)\r\n        log = []\r\n      }, 2000)\r\n      // Make the time after we do the previous logic, so we don't measure the overhead\r\n      // for it all.\r\n      start = performance.now()\r\n    }\r\n\r\n    const beforeInputHandler = function beforeInputHandler(event: InputEvent) {\r\n      if (!validInputTypes.has(event.inputType) || invalidatingEvent) {\r\n        invalidatingEvent = false\r\n        return\r\n      }\r\n\r\n      measureEventStart()\r\n    }\r\n\r\n    const keyDownHandler = function keyDownHandler(event: KeyboardEvent) {\r\n      const key = event.key\r\n\r\n      if (key === 'Backspace' || key === 'Enter') {\r\n        measureEventStart()\r\n      }\r\n    }\r\n\r\n    const pasteHandler = function pasteHandler() {\r\n      invalidatingEvent = true\r\n    }\r\n\r\n    const cutHandler = function cutHandler() {\r\n      invalidatingEvent = true\r\n    }\r\n\r\n    window.addEventListener('keydown', keyDownHandler, true)\r\n    window.addEventListener('selectionchange', measureEventEnd, true)\r\n    window.addEventListener('beforeinput', beforeInputHandler, true)\r\n    window.addEventListener('paste', pasteHandler, true)\r\n    window.addEventListener('cut', cutHandler, true)\r\n\r\n    return () => {\r\n      window.removeEventListener('keydown', keyDownHandler, true)\r\n      window.removeEventListener('selectionchange', measureEventEnd, true)\r\n      window.removeEventListener('beforeinput', beforeInputHandler, true)\r\n      window.removeEventListener('paste', pasteHandler, true)\r\n      window.removeEventListener('cut', cutHandler, true)\r\n    }\r\n  }, [report])\r\n\r\n  return null\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/typing-pref-plugin.tsx"
    }
  ]
}