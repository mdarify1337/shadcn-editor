{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "block-format-toolbar-plugin",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@lexical/list",
    "@lexical/utils",
    "@lexical/selection",
    "@lexical/code"
  ],
  "registryDependencies": [
    "select",
    "https://shadcn-editor.vercel.app/r/toolbar-plugin.json"
  ],
  "files": [
    {
      "path": "editor/plugins/toolbar/block-format-toolbar-plugin.tsx",
      "content": "\"use client\"\r\n\r\nimport { $isListNode, ListNode } from '@lexical/list'\r\nimport { $isHeadingNode } from '@lexical/rich-text'\r\nimport { $findMatchingParent, $getNearestNodeOfType } from '@lexical/utils'\r\nimport { $isRangeSelection, $isRootOrShadowRoot, BaseSelection } from 'lexical'\r\n\r\nimport { useToolbarContext } from '@/registry/default/editor/context/toolbar-context'\r\nimport { useUpdateToolbarHandler } from '@/registry/default/editor/editor-hooks/use-update-toolbar'\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectGroup,\r\n  SelectTrigger,\r\n} from '@/registry/default/ui/select'\r\n\r\nimport { blockTypeToBlockName } from '@/registry/default/editor/plugins/toolbar/block-format/block-format-data'\r\n\r\nexport function BlockFormatDropDown({\r\n  children,\r\n}: {\r\n  children: React.ReactNode\r\n}) {\r\n  const { activeEditor, blockType, setBlockType } = useToolbarContext()\r\n\r\n  function $updateToolbar(selection: BaseSelection) {\r\n    if ($isRangeSelection(selection)) {\r\n      const anchorNode = selection.anchor.getNode()\r\n      let element =\r\n        anchorNode.getKey() === 'root'\r\n          ? anchorNode\r\n          : $findMatchingParent(anchorNode, (e) => {\r\n            const parent = e.getParent()\r\n            return parent !== null && $isRootOrShadowRoot(parent)\r\n          })\r\n\r\n      if (element === null) {\r\n        element = anchorNode.getTopLevelElementOrThrow()\r\n      }\r\n\r\n      const elementKey = element.getKey()\r\n      const elementDOM = activeEditor.getElementByKey(elementKey)\r\n\r\n      if (elementDOM !== null) {\r\n        // setSelectedElementKey(elementKey);\r\n        if ($isListNode(element)) {\r\n          const parentList = $getNearestNodeOfType<ListNode>(\r\n            anchorNode,\r\n            ListNode\r\n          )\r\n          const type = parentList\r\n            ? parentList.getListType()\r\n            : element.getListType()\r\n          setBlockType(type)\r\n        } else {\r\n          const type = $isHeadingNode(element)\r\n            ? element.getTag()\r\n            : element.getType()\r\n          if (type in blockTypeToBlockName) {\r\n            setBlockType(type as keyof typeof blockTypeToBlockName)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  useUpdateToolbarHandler($updateToolbar)\r\n\r\n  return (\r\n    <Select\r\n      value={blockType}\r\n      onValueChange={(value) => {\r\n        setBlockType(value as keyof typeof blockTypeToBlockName)\r\n      }}\r\n    >\r\n      <SelectTrigger className=\"h-8 w-min gap-1\">\r\n        {blockTypeToBlockName[blockType].icon}\r\n        <span>{blockTypeToBlockName[blockType].label}</span>\r\n      </SelectTrigger>\r\n      <SelectContent>\r\n        <SelectGroup>{children}</SelectGroup>\r\n      </SelectContent>\r\n    </Select>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/block-format-toolbar-plugin.tsx"
    },
    {
      "path": "editor/editor-hooks/use-update-toolbar.ts",
      "content": "import { useEffect } from 'react'\r\n\r\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\r\nimport {\r\n  $getSelection,\r\n  BaseSelection,\r\n  COMMAND_PRIORITY_CRITICAL,\r\n} from 'lexical'\r\nimport { SELECTION_CHANGE_COMMAND } from 'lexical'\r\n\r\nimport { useToolbarContext } from '@/registry/default/editor/context/toolbar-context'\r\n\r\nexport function useUpdateToolbarHandler(\r\n  callback: (selection: BaseSelection) => void\r\n) {\r\n  const [editor] = useLexicalComposerContext()\r\n  const { activeEditor } = useToolbarContext()\r\n\r\n  useEffect(() => {\r\n    return activeEditor.registerCommand(\r\n      SELECTION_CHANGE_COMMAND,\r\n      () => {\r\n        const selection = $getSelection()\r\n        if (selection) {\r\n          callback(selection)\r\n        }\r\n        return false\r\n      },\r\n      COMMAND_PRIORITY_CRITICAL\r\n    )\r\n  }, [editor, callback])\r\n\r\n  useEffect(() => {\r\n    activeEditor.getEditorState().read(() => {\r\n      const selection = $getSelection()\r\n      if (selection) {\r\n        callback(selection)\r\n      }\r\n    })\r\n  }, [activeEditor, callback])\r\n}\r\n",
      "type": "registry:hook",
      "target": "components/editor/editor-hooks/use-update-toolbar.ts"
    },
    {
      "path": "editor/plugins/toolbar/block-format/block-format-data.tsx",
      "content": "import {\r\n  CodeIcon,\r\n  Heading1Icon,\r\n  Heading2Icon,\r\n  Heading3Icon,\r\n  ListIcon,\r\n  ListOrderedIcon,\r\n  ListTodoIcon,\r\n  QuoteIcon,\r\n  TextIcon,\r\n} from 'lucide-react'\r\n\r\nexport const blockTypeToBlockName: Record<\r\n  string,\r\n  { label: string; icon: React.ReactNode }\r\n> = {\r\n  paragraph: {\r\n    label: 'Paragraph',\r\n    icon: <TextIcon className=\"size-4\" />,\r\n  },\r\n  h1: {\r\n    label: 'Heading 1',\r\n    icon: <Heading1Icon className=\"size-4\" />,\r\n  },\r\n  h2: {\r\n    label: 'Heading 2',\r\n    icon: <Heading2Icon className=\"size-4\" />,\r\n  },\r\n  h3: {\r\n    label: 'Heading 3',\r\n    icon: <Heading3Icon className=\"size-4\" />,\r\n  },\r\n  number: {\r\n    label: 'Numbered List',\r\n    icon: <ListOrderedIcon className=\"size-4\" />,\r\n  },\r\n  bullet: {\r\n    label: 'Bulleted List',\r\n    icon: <ListIcon className=\"size-4\" />,\r\n  },\r\n  check: {\r\n    label: 'Check List',\r\n    icon: <ListTodoIcon className=\"size-4\" />,\r\n  },\r\n  code: {\r\n    label: 'Code Block',\r\n    icon: <CodeIcon className=\"size-4\" />,\r\n  },\r\n  quote: {\r\n    label: 'Quote',\r\n    icon: <QuoteIcon className=\"size-4\" />,\r\n  },\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/block-format/block-format-data.tsx"
    },
    {
      "path": "editor/plugins/toolbar/block-format/format-bulleted-list.tsx",
      "content": "import { INSERT_UNORDERED_LIST_COMMAND } from '@lexical/list'\r\nimport { $setBlocksType } from '@lexical/selection'\r\nimport { $createParagraphNode, $getSelection, $isRangeSelection } from 'lexical'\r\n\r\nimport { useToolbarContext } from '@/registry/default/editor/context/toolbar-context'\r\nimport { SelectItem } from '@/registry/default/ui/select'\r\n\r\nimport { blockTypeToBlockName } from '@/registry/default/editor/plugins/toolbar/block-format/block-format-data'\r\n\r\nconst BLOCK_FORMAT_VALUE = 'bullet'\r\n\r\nexport function FormatBulletedList() {\r\n  const { activeEditor, blockType } = useToolbarContext()\r\n\r\n  const formatParagraph = () => {\r\n    activeEditor.update(() => {\r\n      const selection = $getSelection()\r\n      if ($isRangeSelection(selection)) {\r\n        $setBlocksType(selection, () => $createParagraphNode())\r\n      }\r\n    })\r\n  }\r\n\r\n  const formatBulletedList = () => {\r\n    if (blockType !== 'number') {\r\n      activeEditor.dispatchCommand(INSERT_UNORDERED_LIST_COMMAND, undefined)\r\n    } else {\r\n      formatParagraph()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <SelectItem value={BLOCK_FORMAT_VALUE} onPointerDown={formatBulletedList}>\r\n      <div className=\"flex items-center gap-1 font-normal\">\r\n        {blockTypeToBlockName[BLOCK_FORMAT_VALUE].icon}\r\n        {blockTypeToBlockName[BLOCK_FORMAT_VALUE].label}\r\n      </div>\r\n    </SelectItem>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/block-format/format-bulleted-list.tsx"
    },
    {
      "path": "editor/plugins/toolbar/block-format/format-check-list.tsx",
      "content": "import { INSERT_CHECK_LIST_COMMAND } from '@lexical/list'\r\nimport { $setBlocksType } from '@lexical/selection'\r\nimport { $createParagraphNode, $getSelection, $isRangeSelection } from 'lexical'\r\n\r\nimport { useToolbarContext } from '@/registry/default/editor/context/toolbar-context'\r\nimport { SelectItem } from '@/registry/default/ui/select'\r\n\r\nimport { blockTypeToBlockName } from '@/registry/default/editor/plugins/toolbar/block-format/block-format-data'\r\n\r\nconst BLOCK_FORMAT_VALUE = 'check'\r\n\r\nexport function FormatCheckList() {\r\n  const { activeEditor, blockType } = useToolbarContext()\r\n\r\n  const formatParagraph = () => {\r\n    activeEditor.update(() => {\r\n      const selection = $getSelection()\r\n      if ($isRangeSelection(selection)) {\r\n        $setBlocksType(selection, () => $createParagraphNode())\r\n      }\r\n    })\r\n  }\r\n\r\n  const formatCheckList = () => {\r\n    if (blockType !== 'number') {\r\n      activeEditor.dispatchCommand(INSERT_CHECK_LIST_COMMAND, undefined)\r\n    } else {\r\n      formatParagraph()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <SelectItem value={BLOCK_FORMAT_VALUE} onPointerDown={formatCheckList}>\r\n      <div className=\"flex items-center gap-1 font-normal\">\r\n        {blockTypeToBlockName[BLOCK_FORMAT_VALUE].icon}\r\n        {blockTypeToBlockName[BLOCK_FORMAT_VALUE].label}\r\n      </div>\r\n    </SelectItem>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/block-format/format-check-list.tsx"
    },
    {
      "path": "editor/plugins/toolbar/block-format/format-numbered-list.tsx",
      "content": "import { INSERT_ORDERED_LIST_COMMAND } from '@lexical/list'\r\nimport { $setBlocksType } from '@lexical/selection'\r\nimport { $createParagraphNode, $getSelection, $isRangeSelection } from 'lexical'\r\n\r\nimport { useToolbarContext } from '@/registry/default/editor/context/toolbar-context'\r\nimport { SelectItem } from '@/registry/default/ui/select'\r\n\r\nimport { blockTypeToBlockName } from '@/registry/default/editor/plugins/toolbar/block-format/block-format-data'\r\n\r\nconst BLOCK_FORMAT_VALUE = 'number'\r\n\r\nexport function FormatNumberedList() {\r\n  const { activeEditor, blockType } = useToolbarContext()\r\n\r\n  const formatParagraph = () => {\r\n    activeEditor.update(() => {\r\n      const selection = $getSelection()\r\n      if ($isRangeSelection(selection)) {\r\n        $setBlocksType(selection, () => $createParagraphNode())\r\n      }\r\n    })\r\n  }\r\n\r\n  const formatNumberedList = () => {\r\n    if (blockType !== 'number') {\r\n      activeEditor.dispatchCommand(INSERT_ORDERED_LIST_COMMAND, undefined)\r\n    } else {\r\n      formatParagraph()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <SelectItem value={BLOCK_FORMAT_VALUE} onPointerDown={formatNumberedList}>\r\n      <div className=\"flex items-center gap-1 font-normal\">\r\n        {blockTypeToBlockName[BLOCK_FORMAT_VALUE].icon}\r\n        {blockTypeToBlockName[BLOCK_FORMAT_VALUE].label}\r\n      </div>\r\n    </SelectItem>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/block-format/format-numbered-list.tsx"
    },
    {
      "path": "editor/plugins/toolbar/block-format/format-paragraph.tsx",
      "content": "import { $setBlocksType } from '@lexical/selection'\r\nimport { $createParagraphNode, $getSelection, $isRangeSelection } from 'lexical'\r\n\r\nimport { useToolbarContext } from '@/registry/default/editor/context/toolbar-context'\r\nimport { SelectItem } from '@/registry/default/ui/select'\r\n\r\nimport { blockTypeToBlockName } from '@/registry/default/editor/plugins/toolbar/block-format/block-format-data'\r\n\r\nconst BLOCK_FORMAT_VALUE = 'paragraph'\r\n\r\nexport function FormatParagraph() {\r\n  const { activeEditor } = useToolbarContext()\r\n\r\n  const formatParagraph = () => {\r\n    activeEditor.update(() => {\r\n      const selection = $getSelection()\r\n      if ($isRangeSelection(selection)) {\r\n        $setBlocksType(selection, () => $createParagraphNode())\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <SelectItem value={BLOCK_FORMAT_VALUE} onPointerDown={formatParagraph}>\r\n      <div className=\"flex items-center gap-1 font-normal\">\r\n        {blockTypeToBlockName[BLOCK_FORMAT_VALUE].icon}\r\n        {blockTypeToBlockName[BLOCK_FORMAT_VALUE].label}\r\n      </div>\r\n    </SelectItem>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/block-format/format-paragraph.tsx"
    },
    {
      "path": "editor/plugins/toolbar/block-format/format-quote.tsx",
      "content": "import { $createQuoteNode } from '@lexical/rich-text'\r\nimport { $setBlocksType } from '@lexical/selection'\r\nimport { $getSelection } from 'lexical'\r\n\r\nimport { useToolbarContext } from '@/registry/default/editor/context/toolbar-context'\r\nimport { SelectItem } from '@/registry/default/ui/select'\r\n\r\nimport { blockTypeToBlockName } from '@/registry/default/editor/plugins/toolbar/block-format/block-format-data'\r\n\r\nconst BLOCK_FORMAT_VALUE = 'quote'\r\n\r\nexport function FormatQuote() {\r\n  const { activeEditor, blockType } = useToolbarContext()\r\n\r\n  const formatQuote = () => {\r\n    if (blockType !== 'quote') {\r\n      activeEditor.update(() => {\r\n        const selection = $getSelection()\r\n        $setBlocksType(selection, () => $createQuoteNode())\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <SelectItem value=\"quote\" onPointerDown={formatQuote}>\r\n      <div className=\"flex items-center gap-1 font-normal\">\r\n        {blockTypeToBlockName[BLOCK_FORMAT_VALUE].icon}\r\n        {blockTypeToBlockName[BLOCK_FORMAT_VALUE].label}\r\n      </div>\r\n    </SelectItem>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/block-format/format-quote.tsx"
    }
  ]
}