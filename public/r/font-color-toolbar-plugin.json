{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "font-color-toolbar-plugin",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "react-colorful",
    "@lexical/selection"
  ],
  "registryDependencies": [
    "button",
    "input",
    "popover",
    "https://shadcn-editor.vercel.app/r/toolbar-plugin.json"
  ],
  "files": [
    {
      "path": "editor/plugins/toolbar/font-color-toolbar-plugin.tsx",
      "content": "'use client'\r\n\r\nimport { useCallback, useState } from 'react'\r\n\r\nimport {\r\n  $getSelectionStyleValueForProperty,\r\n  $patchStyleText,\r\n} from '@lexical/selection'\r\nimport { $getSelection, $isRangeSelection, BaseSelection } from 'lexical'\r\nimport { BaselineIcon } from 'lucide-react'\r\n\r\nimport { useToolbarContext } from '@/registry/default/editor/context/toolbar-context'\r\nimport { useUpdateToolbarHandler } from '@/registry/default/editor/editor-hooks/use-update-toolbar'\r\nimport ColorPicker from '@/registry/default/editor/editor-ui/colorpicker'\r\n\r\nexport function FontColorToolbarPlugin() {\r\n  const { activeEditor } = useToolbarContext()\r\n\r\n  const [fontColor, setFontColor] = useState('#000')\r\n\r\n  const $updateToolbar = (selection: BaseSelection) => {\r\n    if ($isRangeSelection(selection)) {\r\n      setFontColor(\r\n        $getSelectionStyleValueForProperty(selection, 'color', '#000')\r\n      )\r\n    }\r\n  }\r\n\r\n  useUpdateToolbarHandler($updateToolbar)\r\n\r\n  const applyStyleText = useCallback(\r\n    (styles: Record<string, string>, skipHistoryStack?: boolean) => {\r\n      activeEditor.update(\r\n        () => {\r\n          const selection = $getSelection()\r\n          if (selection !== null) {\r\n            $patchStyleText(selection, styles)\r\n          }\r\n        },\r\n        skipHistoryStack ? { tag: 'historic' } : {}\r\n      )\r\n    },\r\n    [activeEditor]\r\n  )\r\n\r\n  const onFontColorSelect = useCallback(\r\n    (value: string, skipHistoryStack: boolean) => {\r\n      applyStyleText({ color: value }, skipHistoryStack)\r\n    },\r\n    [applyStyleText]\r\n  )\r\n\r\n  return (\r\n    <ColorPicker\r\n      icon={<BaselineIcon className=\"size-4\" />}\r\n      color={fontColor}\r\n      onChange={onFontColorSelect}\r\n      title=\"text color\"\r\n    />\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/font-color-toolbar-plugin.tsx"
    },
    {
      "path": "editor/plugins/toolbar/font-background-toolbar-plugin.tsx",
      "content": "'use client'\r\n\r\nimport { useCallback, useState } from 'react'\r\n\r\nimport {\r\n  $getSelectionStyleValueForProperty,\r\n  $patchStyleText,\r\n} from '@lexical/selection'\r\nimport { $getSelection, $isRangeSelection, BaseSelection } from 'lexical'\r\nimport { PaintBucketIcon } from 'lucide-react'\r\n\r\nimport { useToolbarContext } from '@/registry/default/editor/context/toolbar-context'\r\nimport { useUpdateToolbarHandler } from '@/registry/default/editor/editor-hooks/use-update-toolbar'\r\nimport ColorPicker from '@/registry/default/editor/editor-ui/colorpicker'\r\n\r\nexport function FontBackgroundToolbarPlugin() {\r\n  const { activeEditor } = useToolbarContext()\r\n\r\n  const [bgColor, setBgColor] = useState('#fff')\r\n\r\n  const $updateToolbar = (selection: BaseSelection) => {\r\n    if ($isRangeSelection(selection)) {\r\n      setBgColor(\r\n        $getSelectionStyleValueForProperty(\r\n          selection,\r\n          'background-color',\r\n          '#fff'\r\n        )\r\n      )\r\n    }\r\n  }\r\n\r\n  useUpdateToolbarHandler($updateToolbar)\r\n\r\n  const applyStyleText = useCallback(\r\n    (styles: Record<string, string>, skipHistoryStack?: boolean) => {\r\n      activeEditor.update(\r\n        () => {\r\n          const selection = $getSelection()\r\n          if (selection !== null) {\r\n            $patchStyleText(selection, styles)\r\n          }\r\n        },\r\n        skipHistoryStack ? { tag: 'historic' } : {}\r\n      )\r\n    },\r\n    [activeEditor]\r\n  )\r\n\r\n  const onBgColorSelect = useCallback(\r\n    (value: string, skipHistoryStack: boolean) => {\r\n      applyStyleText({ 'background-color': value }, skipHistoryStack)\r\n    },\r\n    [applyStyleText]\r\n  )\r\n\r\n  return (\r\n    <ColorPicker\r\n      icon={<PaintBucketIcon className=\"size-4\" />}\r\n      color={bgColor}\r\n      onChange={onBgColorSelect}\r\n      title=\"text background color\"\r\n    />\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/font-background-toolbar-plugin.tsx"
    },
    {
      "path": "editor/editor-ui/colorpicker.tsx",
      "content": "import * as React from 'react'\r\n\r\nimport { HexColorPicker } from 'react-colorful'\r\n\r\nimport { Button } from '@/registry/default/ui/button'\r\nimport { Input } from '@/registry/default/ui/input'\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from '@/registry/default/ui/popover'\r\n\r\ntype Props = {\r\n  disabled?: boolean\r\n  icon?: React.ReactNode\r\n  label?: string\r\n  title?: string\r\n  stopCloseOnClickSelf?: boolean\r\n  color: string\r\n  onChange?: (color: string, skipHistoryStack: boolean) => void\r\n}\r\n\r\nexport default function ColorPicker({\r\n  disabled = false,\r\n  stopCloseOnClickSelf = true,\r\n  color,\r\n  onChange,\r\n  icon,\r\n  label,\r\n  ...rest\r\n}: Props) {\r\n  return (\r\n    <Popover modal={true}>\r\n      <PopoverTrigger asChild disabled={disabled}>\r\n        <Button\r\n          size={'sm'}\r\n          variant={'outline'}\r\n          className=\"h-8 w-8\"\r\n          {...rest}\r\n        >\r\n          <span className=\"size-4 rounded-full\">{icon}</span>\r\n          {/* <ChevronDownIcon className='size-4'/> */}\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent className=\"w-[200px] p-0\">\r\n        <HexColorPicker\r\n          color={color}\r\n          onChange={(color) => onChange?.(color, false)}\r\n        />\r\n        <Input\r\n          maxLength={7}\r\n          onChange={(e) => {\r\n            e.stopPropagation()\r\n            onChange?.(e?.currentTarget?.value, false)\r\n          }}\r\n          value={color}\r\n        />\r\n      </PopoverContent>\r\n    </Popover>\r\n  )\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/editor/editor-ui/colorpicker.tsx"
    },
    {
      "path": "editor/editor-hooks/use-update-toolbar.ts",
      "content": "import { useEffect } from 'react'\r\n\r\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\r\nimport {\r\n  $getSelection,\r\n  BaseSelection,\r\n  COMMAND_PRIORITY_CRITICAL,\r\n} from 'lexical'\r\nimport { SELECTION_CHANGE_COMMAND } from 'lexical'\r\n\r\nimport { useToolbarContext } from '@/registry/default/editor/context/toolbar-context'\r\n\r\nexport function useUpdateToolbarHandler(\r\n  callback: (selection: BaseSelection) => void\r\n) {\r\n  const [editor] = useLexicalComposerContext()\r\n  const { activeEditor } = useToolbarContext()\r\n\r\n  useEffect(() => {\r\n    return activeEditor.registerCommand(\r\n      SELECTION_CHANGE_COMMAND,\r\n      () => {\r\n        const selection = $getSelection()\r\n        if (selection) {\r\n          callback(selection)\r\n        }\r\n        return false\r\n      },\r\n      COMMAND_PRIORITY_CRITICAL\r\n    )\r\n  }, [editor, callback])\r\n\r\n  useEffect(() => {\r\n    activeEditor.getEditorState().read(() => {\r\n      const selection = $getSelection()\r\n      if (selection) {\r\n        callback(selection)\r\n      }\r\n    })\r\n  }, [activeEditor, callback])\r\n}\r\n",
      "type": "registry:hook",
      "target": "components/editor/editor-hooks/use-update-toolbar.ts"
    }
  ]
}