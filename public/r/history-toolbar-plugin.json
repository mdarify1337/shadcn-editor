{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "history-toolbar-plugin",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@lexical/utils"
  ],
  "registryDependencies": [
    "button",
    "https://shadcn-editor.vercel.app/r/toolbar-plugin.json"
  ],
  "files": [
    {
      "path": "editor/plugins/toolbar/history-toolbar-plugin.tsx",
      "content": "'use client'\r\n\r\nimport { useEffect, useImperativeHandle, useState } from 'react'\r\n\r\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\r\nimport { mergeRegister } from '@lexical/utils'\r\nimport {\r\n  CAN_REDO_COMMAND,\r\n  CAN_UNDO_COMMAND,\r\n  COMMAND_PRIORITY_CRITICAL,\r\n  LexicalEditor,\r\n  REDO_COMMAND,\r\n  UNDO_COMMAND,\r\n} from 'lexical'\r\nimport { RedoIcon, UndoIcon } from 'lucide-react'\r\n\r\nimport { Button } from '@/registry/default/ui/button'\r\n\r\nimport { useToolbarContext } from '@/registry/default/editor/context/toolbar-context'\r\n\r\nconst IS_APPLE = true\r\n\r\nexport function HistoryToolbarPlugin() {\r\n  const [editor] = useLexicalComposerContext()\r\n  const { activeEditor, $updateToolbar } = useToolbarContext()\r\n  const [isEditable, setIsEditable] = useState(editor.isEditable())\r\n  const [canUndo, setCanUndo] = useState(false)\r\n  const [canRedo, setCanRedo] = useState(false)\r\n\r\n  useEffect(() => {\r\n    return mergeRegister(\r\n      editor.registerEditableListener((editable) => {\r\n        setIsEditable(editable)\r\n      }),\r\n      activeEditor.registerUpdateListener(({ editorState }) => {\r\n        editorState.read(() => {\r\n          $updateToolbar()\r\n        })\r\n      }),\r\n      activeEditor.registerCommand<boolean>(\r\n        CAN_UNDO_COMMAND,\r\n        (payload) => {\r\n          setCanUndo(payload)\r\n          return false\r\n        },\r\n        COMMAND_PRIORITY_CRITICAL\r\n      ),\r\n      activeEditor.registerCommand<boolean>(\r\n        CAN_REDO_COMMAND,\r\n        (payload) => {\r\n          setCanRedo(payload)\r\n          return false\r\n        },\r\n        COMMAND_PRIORITY_CRITICAL\r\n      )\r\n    )\r\n  }, [$updateToolbar, activeEditor, editor])\r\n\r\n  return (\r\n    <div className=\"flex items-center gap-1\">\r\n      <Button\r\n        disabled={!canUndo || !isEditable}\r\n        onClick={() => {\r\n          activeEditor.dispatchCommand(UNDO_COMMAND, undefined)\r\n        }}\r\n        title={IS_APPLE ? 'Undo (⌘Z)' : 'Undo (Ctrl+Z)'}\r\n        type=\"button\"\r\n        aria-label=\"Undo\"\r\n        size=\"sm\"\r\n        className=\"h-8 w-8\"\r\n        variant={'outline'}\r\n      >\r\n        <UndoIcon className=\"size-4\" />\r\n      </Button>\r\n      <Button\r\n        disabled={!canRedo || !isEditable}\r\n        onClick={() => {\r\n          activeEditor.dispatchCommand(REDO_COMMAND, undefined)\r\n        }}\r\n        title={IS_APPLE ? 'Redo (⇧⌘Z)' : 'Redo (Ctrl+Y)'}\r\n        type=\"button\"\r\n        aria-label=\"Redo\"\r\n        size=\"sm\"\r\n        className=\"h-8 w-8\"\r\n        variant={'outline'}\r\n      >\r\n        <RedoIcon className=\"size-4\" />\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/history-toolbar-plugin.tsx"
    }
  ]
}