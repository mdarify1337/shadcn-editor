{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "font-format-toolbar-plugin",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@lexical/table"
  ],
  "registryDependencies": [
    "toggle",
    "https://shadcn-editor.vercel.app/r/toolbar-plugin.json"
  ],
  "files": [
    {
      "path": "editor/plugins/toolbar/font-format-toolbar-plugin.tsx",
      "content": "'use client'\r\n\r\nimport { useState } from 'react'\r\n\r\nimport { $isTableSelection } from '@lexical/table'\r\nimport {\r\n  $isRangeSelection,\r\n  BaseSelection,\r\n  FORMAT_TEXT_COMMAND,\r\n  TextFormatType,\r\n} from 'lexical'\r\nimport {\r\n  BoldIcon,\r\n  CodeIcon,\r\n  ItalicIcon,\r\n  StrikethroughIcon,\r\n  UnderlineIcon,\r\n} from 'lucide-react'\r\n\r\nimport { Toggle } from '@/registry/default/ui/toggle'\r\n\r\nimport { useToolbarContext } from '@/registry/default/editor/context/toolbar-context'\r\nimport { useUpdateToolbarHandler } from '@/registry/default/editor/editor-hooks/use-update-toolbar'\r\n\r\nconst Icons: Partial<Record<TextFormatType, React.ElementType>> = {\r\n  bold: BoldIcon,\r\n  italic: ItalicIcon,\r\n  underline: UnderlineIcon,\r\n  strikethrough: StrikethroughIcon,\r\n  code: CodeIcon,\r\n} as const\r\n\r\nexport function FontFormatToolbarPlugin({\r\n  format,\r\n}: {\r\n  format: Omit<TextFormatType, 'highlight' | 'subscript' | 'superscript'>\r\n}) {\r\n  const { activeEditor } = useToolbarContext()\r\n  const [isSelected, setIsSelected] = useState<boolean>(false)\r\n\r\n  const $updateToolbar = (selection: BaseSelection) => {\r\n    if ($isRangeSelection(selection) || $isTableSelection(selection)) {\r\n      // @ts-ignore\r\n      setIsSelected(selection.hasFormat(format as TextFormatType))\r\n    }\r\n  }\r\n\r\n  useUpdateToolbarHandler($updateToolbar)\r\n\r\n  const Icon = Icons[format as TextFormatType] as React.ElementType\r\n\r\n  return (\r\n    <Toggle\r\n      aria-label=\"Toggle bold\"\r\n      variant=\"outline\"\r\n      size=\"sm\"\r\n      defaultPressed={isSelected}\r\n      pressed={isSelected}\r\n      onPressedChange={setIsSelected}\r\n      onClick={() => {\r\n        activeEditor.dispatchCommand(\r\n          FORMAT_TEXT_COMMAND,\r\n          format as TextFormatType\r\n        )\r\n      }}\r\n    >\r\n      <Icon className=\"h-4 w-4\" />\r\n    </Toggle>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/font-format-toolbar-plugin.tsx"
    },
    {
      "path": "editor/editor-hooks/use-update-toolbar.ts",
      "content": "import { useEffect } from 'react'\r\n\r\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\r\nimport {\r\n  $getSelection,\r\n  BaseSelection,\r\n  COMMAND_PRIORITY_CRITICAL,\r\n} from 'lexical'\r\nimport { SELECTION_CHANGE_COMMAND } from 'lexical'\r\n\r\nimport { useToolbarContext } from '@/registry/default/editor/context/toolbar-context'\r\n\r\nexport function useUpdateToolbarHandler(\r\n  callback: (selection: BaseSelection) => void\r\n) {\r\n  const [editor] = useLexicalComposerContext()\r\n  const { activeEditor } = useToolbarContext()\r\n\r\n  useEffect(() => {\r\n    return activeEditor.registerCommand(\r\n      SELECTION_CHANGE_COMMAND,\r\n      () => {\r\n        const selection = $getSelection()\r\n        if (selection) {\r\n          callback(selection)\r\n        }\r\n        return false\r\n      },\r\n      COMMAND_PRIORITY_CRITICAL\r\n    )\r\n  }, [editor, callback])\r\n\r\n  useEffect(() => {\r\n    activeEditor.getEditorState().read(() => {\r\n      const selection = $getSelection()\r\n      if (selection) {\r\n        callback(selection)\r\n      }\r\n    })\r\n  }, [activeEditor, callback])\r\n}\r\n",
      "type": "registry:hook",
      "target": "components/editor/editor-hooks/use-update-toolbar.ts"
    }
  ]
}