{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "poll-plugin",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@lexical/utils"
  ],
  "registryDependencies": [
    "button",
    "dialog",
    "input",
    "label",
    "select",
    "https://shadcn-editor.vercel.app/r/toolbar-plugin.json"
  ],
  "files": [
    {
      "path": "editor/plugins/poll-plugin.tsx",
      "content": "'use client'\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nimport { useEffect, useState, JSX } from 'react'\r\nimport * as React from 'react'\r\n\r\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\r\nimport { $wrapNodeInElement } from '@lexical/utils'\r\nimport {\r\n  $createParagraphNode,\r\n  $insertNodes,\r\n  $isRootOrShadowRoot,\r\n  COMMAND_PRIORITY_EDITOR,\r\n  LexicalCommand,\r\n  LexicalEditor,\r\n  createCommand,\r\n} from 'lexical'\r\n\r\nimport { Button } from '@/registry/default/ui/button'\r\nimport { DialogFooter } from '@/registry/default/ui/dialog'\r\nimport { Input } from '@/registry/default/ui/input'\r\nimport { Label } from '@/registry/default/ui/label'\r\n\r\nimport { $createPollNode, PollNode, createPollOption } from '@/registry/default/editor/nodes/poll-node'\r\n\r\nexport const INSERT_POLL_COMMAND: LexicalCommand<string> = createCommand(\r\n  'INSERT_POLL_COMMAND'\r\n)\r\n\r\nexport function InsertPollDialog({\r\n  activeEditor,\r\n  onClose,\r\n}: {\r\n  activeEditor: LexicalEditor\r\n  onClose: () => void\r\n}): JSX.Element {\r\n  const [question, setQuestion] = useState('')\r\n\r\n  const onClick = () => {\r\n    activeEditor.dispatchCommand(INSERT_POLL_COMMAND, question)\r\n    onClose()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <Label>Question</Label>\r\n        <Input onChange={(e) => setQuestion(e.target.value)} value={question} />\r\n      </div>\r\n      <DialogFooter>\r\n        <Button disabled={question.trim() === ''} onClick={onClick}>\r\n          Confirm\r\n        </Button>\r\n      </DialogFooter>\r\n    </>\r\n  )\r\n}\r\n\r\nexport function PollPlugin(): JSX.Element | null {\r\n  const [editor] = useLexicalComposerContext()\r\n  useEffect(() => {\r\n    if (!editor.hasNodes([PollNode])) {\r\n      throw new Error('PollPlugin: PollNode not registered on editor')\r\n    }\r\n\r\n    return editor.registerCommand<string>(\r\n      INSERT_POLL_COMMAND,\r\n      (payload) => {\r\n        const pollNode = $createPollNode(payload, [\r\n          createPollOption(),\r\n          createPollOption(),\r\n        ])\r\n        $insertNodes([pollNode])\r\n        if ($isRootOrShadowRoot(pollNode.getParentOrThrow())) {\r\n          $wrapNodeInElement(pollNode, $createParagraphNode).selectEnd()\r\n        }\r\n\r\n        return true\r\n      },\r\n      COMMAND_PRIORITY_EDITOR\r\n    )\r\n  }, [editor])\r\n  return null\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/poll-plugin.tsx"
    },
    {
      "path": "editor/nodes/poll-node.tsx",
      "content": "import * as React from 'react'\r\nimport { Suspense, JSX } from 'react'\r\n\r\nimport {\r\n  DOMConversionMap,\r\n  DOMConversionOutput,\r\n  DOMExportOutput,\r\n  DecoratorNode,\r\n  LexicalNode,\r\n  NodeKey,\r\n  SerializedLexicalNode,\r\n  Spread,\r\n} from 'lexical'\r\n\r\nexport type Options = ReadonlyArray<Option>\r\n\r\nexport type Option = Readonly<{\r\n  text: string\r\n  uid: string\r\n  votes: Array<number>\r\n}>\r\n\r\nconst PollComponent = React.lazy(() => import('../editor-ui/poll-component'))\r\n\r\nfunction createUID(): string {\r\n  return Math.random()\r\n    .toString(36)\r\n    .replace(/[^a-z]+/g, '')\r\n    .substr(0, 5)\r\n}\r\n\r\nexport function createPollOption(text = ''): Option {\r\n  return {\r\n    text,\r\n    uid: createUID(),\r\n    votes: [],\r\n  }\r\n}\r\n\r\nfunction cloneOption(\r\n  option: Option,\r\n  text: string,\r\n  votes?: Array<number>\r\n): Option {\r\n  return {\r\n    text,\r\n    uid: option.uid,\r\n    votes: votes || Array.from(option.votes),\r\n  }\r\n}\r\n\r\nexport type SerializedPollNode = Spread<\r\n  {\r\n    question: string\r\n    options: Options\r\n  },\r\n  SerializedLexicalNode\r\n>\r\n\r\nfunction $convertPollElement(domNode: HTMLElement): DOMConversionOutput | null {\r\n  const question = domNode.getAttribute('data-lexical-poll-question')\r\n  const options = domNode.getAttribute('data-lexical-poll-options')\r\n  if (question !== null && options !== null) {\r\n    const node = $createPollNode(question, JSON.parse(options))\r\n    return { node }\r\n  }\r\n  return null\r\n}\r\n\r\nexport class PollNode extends DecoratorNode<JSX.Element> {\r\n  __question: string\r\n  __options: Options\r\n\r\n  static getType(): string {\r\n    return 'poll'\r\n  }\r\n\r\n  static clone(node: PollNode): PollNode {\r\n    return new PollNode(node.__question, node.__options, node.__key)\r\n  }\r\n\r\n  static importJSON(serializedNode: SerializedPollNode): PollNode {\r\n    const node = $createPollNode(\r\n      serializedNode.question,\r\n      serializedNode.options\r\n    )\r\n    serializedNode.options.forEach(node.addOption)\r\n    return node\r\n  }\r\n\r\n  constructor(question: string, options: Options, key?: NodeKey) {\r\n    super(key)\r\n    this.__question = question\r\n    this.__options = options\r\n  }\r\n\r\n  exportJSON(): SerializedPollNode {\r\n    return {\r\n      options: this.__options,\r\n      question: this.__question,\r\n      type: 'poll',\r\n      version: 1,\r\n    }\r\n  }\r\n\r\n  addOption(option: Option): void {\r\n    const self = this.getWritable()\r\n    const options = Array.from(self.__options)\r\n    options.push(option)\r\n    self.__options = options\r\n  }\r\n\r\n  deleteOption(option: Option): void {\r\n    const self = this.getWritable()\r\n    const options = Array.from(self.__options)\r\n    const index = options.indexOf(option)\r\n    options.splice(index, 1)\r\n    self.__options = options\r\n  }\r\n\r\n  setOptionText(option: Option, text: string): void {\r\n    const self = this.getWritable()\r\n    const clonedOption = cloneOption(option, text)\r\n    const options = Array.from(self.__options)\r\n    const index = options.indexOf(option)\r\n    options[index] = clonedOption\r\n    self.__options = options\r\n  }\r\n\r\n  toggleVote(option: Option, clientID: number): void {\r\n    const self = this.getWritable()\r\n    const votes = option.votes\r\n    const votesClone = Array.from(votes)\r\n    const voteIndex = votes.indexOf(clientID)\r\n    if (voteIndex === -1) {\r\n      votesClone.push(clientID)\r\n    } else {\r\n      votesClone.splice(voteIndex, 1)\r\n    }\r\n    const clonedOption = cloneOption(option, option.text, votesClone)\r\n    const options = Array.from(self.__options)\r\n    const index = options.indexOf(option)\r\n    options[index] = clonedOption\r\n    self.__options = options\r\n  }\r\n\r\n  static importDOM(): DOMConversionMap | null {\r\n    return {\r\n      span: (domNode: HTMLElement) => {\r\n        if (!domNode.hasAttribute('data-lexical-poll-question')) {\r\n          return null\r\n        }\r\n        return {\r\n          conversion: $convertPollElement,\r\n          priority: 2,\r\n        }\r\n      },\r\n    }\r\n  }\r\n\r\n  exportDOM(): DOMExportOutput {\r\n    const element = document.createElement('span')\r\n    element.setAttribute('data-lexical-poll-question', this.__question)\r\n    element.setAttribute(\r\n      'data-lexical-poll-options',\r\n      JSON.stringify(this.__options)\r\n    )\r\n    return { element }\r\n  }\r\n\r\n  createDOM(): HTMLElement {\r\n    const elem = document.createElement('span')\r\n    elem.style.display = 'inline-block'\r\n    return elem\r\n  }\r\n\r\n  updateDOM(): false {\r\n    return false\r\n  }\r\n\r\n  decorate(): JSX.Element {\r\n    return (\r\n      <Suspense fallback={null}>\r\n        <PollComponent\r\n          question={this.__question}\r\n          options={this.__options}\r\n          nodeKey={this.__key}\r\n        />\r\n      </Suspense>\r\n    )\r\n  }\r\n}\r\n\r\nexport function $createPollNode(question: string, options: Options): PollNode {\r\n  return new PollNode(question, options)\r\n}\r\n\r\nexport function $isPollNode(\r\n  node: LexicalNode | null | undefined\r\n): node is PollNode {\r\n  return node instanceof PollNode\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/nodes/poll-node.tsx"
    },
    {
      "path": "editor/editor-ui/poll-component.tsx",
      "content": "import * as React from 'react'\r\nimport { useCallback, useEffect, useMemo, useRef, useState, JSX } from 'react'\r\n\r\nimport { useCollaborationContext } from '@lexical/react/LexicalCollaborationContext'\r\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\r\nimport { useLexicalNodeSelection } from '@lexical/react/useLexicalNodeSelection'\r\nimport { mergeRegister } from '@lexical/utils'\r\nimport {\r\n  $getNodeByKey,\r\n  $getSelection,\r\n  $isNodeSelection,\r\n  BaseSelection,\r\n  CLICK_COMMAND,\r\n  COMMAND_PRIORITY_LOW,\r\n  KEY_BACKSPACE_COMMAND,\r\n  KEY_DELETE_COMMAND,\r\n  NodeKey,\r\n} from 'lexical'\r\n\r\nimport { Button } from '@/registry/default/ui/button'\r\nimport { Input } from '@/registry/default/ui/input'\r\n\r\nimport type { Option, Options, PollNode } from '@/registry/default/editor/nodes/poll-node'\r\nimport { $isPollNode, createPollOption } from '@/registry/default/editor/nodes/poll-node'\r\n\r\nfunction getTotalVotes(options: Options): number {\r\n  return options.reduce((totalVotes, next) => {\r\n    return totalVotes + next.votes.length\r\n  }, 0)\r\n}\r\n\r\nfunction PollOptionComponent({\r\n  option,\r\n  index,\r\n  options,\r\n  totalVotes,\r\n  withPollNode,\r\n}: {\r\n  index: number\r\n  option: Option\r\n  options: Options\r\n  totalVotes: number\r\n  withPollNode: (\r\n    cb: (pollNode: PollNode) => void,\r\n    onSelect?: () => void\r\n  ) => void\r\n}): JSX.Element {\r\n  const { clientID } = useCollaborationContext()\r\n  const checkboxRef = useRef(null)\r\n  const votesArray = option.votes\r\n  const checkedIndex = votesArray.indexOf(clientID)\r\n  const checked = checkedIndex !== -1\r\n  const votes = votesArray.length\r\n  const text = option.text\r\n\r\n  return (\r\n    <div className=\"mb-2.5 flex flex-row items-center\">\r\n      <div\r\n        className={`relative mr-2.5 flex h-[22px] w-[22px] rounded-md border border-gray-400 ${\r\n          checked\r\n            ? 'border-primary bg-primary after:pointer-events-none after:absolute after:left-2 after:top-1 after:m-0 after:block after:h-[9px] after:w-[5px] after:rotate-45 after:cursor-pointer after:border-b-2 after:border-r-2 after:border-solid after:border-white after:content-[\"\"]'\r\n            : ''\r\n        }`}\r\n      >\r\n        <input\r\n          ref={checkboxRef}\r\n          className=\"absolute block h-full w-full cursor-pointer border-0 opacity-0\"\r\n          type=\"checkbox\"\r\n          onChange={(e) => {\r\n            withPollNode((node) => {\r\n              node.toggleVote(option, clientID)\r\n            })\r\n          }}\r\n          checked={checked}\r\n        />\r\n      </div>\r\n      <div className=\"relative flex flex-[10px] cursor-pointer overflow-hidden rounded-md border border-primary\">\r\n        <div\r\n          className=\"transition-width absolute left-0 top-0 z-0 h-full bg-accent duration-1000 ease-in-out\"\r\n          style={{ width: `${votes === 0 ? 0 : (votes / totalVotes) * 100}%` }}\r\n        />\r\n        <span className=\"absolute right-4 top-1.5 text-xs text-primary\">\r\n          {votes > 0 && (votes === 1 ? '1 vote' : `${votes} votes`)}\r\n        </span>\r\n        <Input\r\n          type=\"text\"\r\n          value={text}\r\n          onChange={(e) => {\r\n            const target = e.target\r\n            const value = target.value\r\n            const selectionStart = target.selectionStart\r\n            const selectionEnd = target.selectionEnd\r\n            withPollNode(\r\n              (node) => {\r\n                node.setOptionText(option, value)\r\n              },\r\n              () => {\r\n                target.selectionStart = selectionStart\r\n                target.selectionEnd = selectionEnd\r\n              }\r\n            )\r\n          }}\r\n          placeholder={`Option ${index + 1}`}\r\n        />\r\n      </div>\r\n      <button\r\n        disabled={options.length < 3}\r\n        className={`relative z-0 ml-1.5 flex h-7 w-7 cursor-pointer rounded-md border-0 bg-transparent bg-[position:6px_6px] bg-no-repeat opacity-30 before:absolute before:left-[13px] before:top-1.5 before:block before:h-[15px] before:w-0.5 before:-rotate-45 before:bg-gray-400 before:content-[''] after:absolute after:left-[13px] after:top-1.5 after:block after:h-[15px] after:w-0.5 after:rotate-45 after:bg-gray-400 after:content-[''] hover:bg-gray-100 hover:opacity-100 disabled:cursor-not-allowed disabled:hover:bg-transparent disabled:hover:opacity-30`}\r\n        aria-label=\"Remove\"\r\n        onClick={() => {\r\n          withPollNode((node) => {\r\n            node.deleteOption(option)\r\n          })\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function PollComponent({\r\n  question,\r\n  options,\r\n  nodeKey,\r\n}: {\r\n  nodeKey: NodeKey\r\n  options: Options\r\n  question: string\r\n}): JSX.Element {\r\n  const [editor] = useLexicalComposerContext()\r\n  const totalVotes = useMemo(() => getTotalVotes(options), [options])\r\n  const [isSelected, setSelected, clearSelection] =\r\n    useLexicalNodeSelection(nodeKey)\r\n  const [selection, setSelection] = useState<BaseSelection | null>(null)\r\n  const ref = useRef(null)\r\n\r\n  const $onDelete = useCallback(\r\n    (payload: KeyboardEvent) => {\r\n      const deleteSelection = $getSelection()\r\n      if (isSelected && $isNodeSelection(deleteSelection)) {\r\n        const event: KeyboardEvent = payload\r\n        event.preventDefault()\r\n        editor.update(() => {\r\n          deleteSelection.getNodes().forEach((node) => {\r\n            if ($isPollNode(node)) {\r\n              node.remove()\r\n            }\r\n          })\r\n        })\r\n      }\r\n      return false\r\n    },\r\n    [editor, isSelected]\r\n  )\r\n\r\n  useEffect(() => {\r\n    return mergeRegister(\r\n      editor.registerUpdateListener(({ editorState }) => {\r\n        setSelection(editorState.read(() => $getSelection()))\r\n      }),\r\n      editor.registerCommand<MouseEvent>(\r\n        CLICK_COMMAND,\r\n        (payload) => {\r\n          const event = payload\r\n\r\n          if (event.target === ref.current) {\r\n            if (!event.shiftKey) {\r\n              clearSelection()\r\n            }\r\n            setSelected(!isSelected)\r\n            return true\r\n          }\r\n\r\n          return false\r\n        },\r\n        COMMAND_PRIORITY_LOW\r\n      ),\r\n      editor.registerCommand(\r\n        KEY_DELETE_COMMAND,\r\n        $onDelete,\r\n        COMMAND_PRIORITY_LOW\r\n      ),\r\n      editor.registerCommand(\r\n        KEY_BACKSPACE_COMMAND,\r\n        $onDelete,\r\n        COMMAND_PRIORITY_LOW\r\n      )\r\n    )\r\n  }, [clearSelection, editor, isSelected, nodeKey, $onDelete, setSelected])\r\n\r\n  const withPollNode = (\r\n    cb: (node: PollNode) => void,\r\n    onUpdate?: () => void\r\n  ): void => {\r\n    editor.update(\r\n      () => {\r\n        const node = $getNodeByKey(nodeKey)\r\n        if ($isPollNode(node)) {\r\n          cb(node)\r\n        }\r\n      },\r\n      { onUpdate }\r\n    )\r\n  }\r\n\r\n  const addOption = () => {\r\n    withPollNode((node) => {\r\n      node.addOption(createPollOption())\r\n    })\r\n  }\r\n\r\n  const isFocused = $isNodeSelection(selection) && isSelected\r\n\r\n  return (\r\n    <div\r\n      className={`min-w-[400px] max-w-[600px] cursor-pointer select-none rounded-lg border border-gray-200 bg-background ${\r\n        isFocused ? 'outline outline-2 outline-primary' : ''\r\n      }`}\r\n      ref={ref}\r\n    >\r\n      <div className=\"m-4 cursor-default\">\r\n        <h2 className=\"m-0 mb-4 text-center text-lg text-gray-600\">\r\n          {question}\r\n        </h2>\r\n        {options.map((option, index) => {\r\n          const key = option.uid\r\n          return (\r\n            <PollOptionComponent\r\n              key={key}\r\n              withPollNode={withPollNode}\r\n              option={option}\r\n              index={index}\r\n              options={options}\r\n              totalVotes={totalVotes}\r\n            />\r\n          )\r\n        })}\r\n        <div className=\"flex justify-center\">\r\n          <Button onClick={addOption} size=\"sm\">\r\n            Add Option\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/editor-ui/poll-component.tsx"
    },
    {
      "path": "editor/plugins/toolbar/block-insert/insert-poll.tsx",
      "content": "'use client'\r\n\r\nimport { ListChecksIcon } from 'lucide-react'\r\n\r\nimport { useToolbarContext } from '@/registry/default/editor/context/toolbar-context'\r\nimport { SelectItem } from '@/registry/default/ui/select'\r\n\r\nimport { InsertPollDialog } from '@/registry/default/editor/plugins/poll-plugin'\r\n\r\nexport function InsertPoll() {\r\n  const { activeEditor, showModal } = useToolbarContext()\r\n\r\n  return (\r\n    <SelectItem\r\n      value=\"poll\"\r\n      onPointerUp={() =>\r\n        showModal('Insert Poll', (onClose) => (\r\n          <InsertPollDialog activeEditor={activeEditor} onClose={onClose} />\r\n        ))\r\n      }\r\n      className=\"\"\r\n    >\r\n      <div className=\"flex items-center gap-1\">\r\n        <ListChecksIcon className=\"size-4\" />\r\n        <span>Poll</span>\r\n      </div>\r\n    </SelectItem>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/block-insert/insert-poll.tsx"
    }
  ]
}