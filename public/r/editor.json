{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "editor",
  "type": "registry:block",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "lexical",
    "@lexical/react",
    "lucide-react"
  ],
  "registryDependencies": [
    "tooltip"
  ],
  "files": [
    {
      "path": "blocks/editor-00/page.tsx",
      "content": "'use client'\r\n\r\nimport { useState } from 'react';\r\nimport { SerializedEditorState } from 'lexical';\r\nimport { Editor } from '@/registry/default/blocks/editor-00/editor';\r\n\r\nexport const initialValue = {\r\n  root: {\r\n    children: [\r\n      {\r\n        children: [\r\n          {\r\n            detail: 0,\r\n            format: 0,\r\n            mode: 'normal',\r\n            style: '',\r\n            text: 'Hello World ðŸš€',\r\n            type: 'text',\r\n            version: 1,\r\n          },\r\n        ],\r\n        direction: 'ltr',\r\n        format: '',\r\n        indent: 0,\r\n        type: 'paragraph',\r\n        version: 1,\r\n      },\r\n    ],\r\n    direction: 'ltr',\r\n    format: '',\r\n    indent: 0,\r\n    type: 'root',\r\n    version: 1,\r\n  },\r\n} as unknown as SerializedEditorState\r\n\r\nexport default function EditorPage() {\r\n  const [editorState, setEditorState] =\r\n    useState<SerializedEditorState>(initialValue)\r\n  return (\r\n    <Editor\r\n      editorSerializedState={editorState}\r\n      onSerializedChange={(value) => setEditorState(value)}\r\n    />\r\n  )\r\n}\r\n\r\n",
      "type": "registry:page",
      "target": "app/editor-00/page.tsx"
    },
    {
      "path": "blocks/editor-00/editor.tsx",
      "content": "'use client'\r\n\r\nimport {\r\n  InitialConfigType,\r\n  LexicalComposer,\r\n} from '@lexical/react/LexicalComposer'\r\nimport { OnChangePlugin } from '@lexical/react/LexicalOnChangePlugin'\r\nimport { EditorState, SerializedEditorState } from 'lexical'\r\n\r\nimport { editorTheme } from '@/registry/default/editor/themes/editor-theme'\r\nimport { TooltipProvider } from '@/registry/default/ui/tooltip'\r\n\r\nimport { nodes } from './nodes'\r\nimport { Plugins } from './plugins'\r\n\r\nconst editorConfig: InitialConfigType = {\r\n  namespace: 'Editor',\r\n  theme: editorTheme,\r\n  nodes,\r\n  onError: (error: Error) => {\r\n    console.error(error)\r\n  },\r\n}\r\n\r\nexport function Editor({\r\n  editorState,\r\n  editorSerializedState,\r\n  onChange,\r\n  onSerializedChange,\r\n}: {\r\n  editorState?: EditorState\r\n  editorSerializedState?: SerializedEditorState\r\n  onChange?: (editorState: EditorState) => void\r\n  onSerializedChange?: (editorSerializedState: SerializedEditorState) => void\r\n}) {\r\n  return (\r\n    <div className=\"overflow-hidden rounded-lg border bg-background shadow\">\r\n      <LexicalComposer\r\n        initialConfig={{\r\n          ...editorConfig,\r\n          ...(editorState ? { editorState } : {}),\r\n          ...(editorSerializedState\r\n            ? { editorState: JSON.stringify(editorSerializedState) }\r\n            : {}),\r\n        }}\r\n      >\r\n        <TooltipProvider>\r\n          <Plugins />\r\n\r\n          <OnChangePlugin\r\n            ignoreSelectionChange={true}\r\n            onChange={(editorState) => {\r\n              onChange?.(editorState)\r\n              onSerializedChange?.(editorState.toJSON())\r\n            }}\r\n          />\r\n        </TooltipProvider>\r\n      </LexicalComposer>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:block",
      "target": "components/blocks/editor-00/editor.tsx"
    },
    {
      "path": "blocks/editor-00/nodes.ts",
      "content": "import { Klass, LexicalNode, LexicalNodeReplacement, ParagraphNode, TextNode } from 'lexical'\r\nimport { HeadingNode, QuoteNode } from \"@lexical/rich-text\"\r\n\r\nexport const nodes: ReadonlyArray<Klass<LexicalNode> | LexicalNodeReplacement> =\r\n  [\r\n    HeadingNode,\r\n    ParagraphNode,\r\n    TextNode,\r\n    QuoteNode,\r\n  ]\r\n",
      "type": "registry:block",
      "target": "components/blocks/editor-00/nodes.ts"
    },
    {
      "path": "blocks/editor-00/plugins.tsx",
      "content": "import { useState } from 'react';\r\nimport { LexicalErrorBoundary } from '@lexical/react/LexicalErrorBoundary';\r\nimport { RichTextPlugin } from '@lexical/react/LexicalRichTextPlugin';\r\nimport { ContentEditable } from '@/registry/default/editor/editor-ui/content-editable';\r\n\r\nexport function Plugins() {\r\n  const [floatingAnchorElem, setFloatingAnchorElem] =\r\n    useState<HTMLDivElement | null>(null);\r\n\r\n  const onRef = (_floatingAnchorElem: HTMLDivElement) => {\r\n    if (_floatingAnchorElem !== null) {\r\n      setFloatingAnchorElem(_floatingAnchorElem);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      {/* toolbar plugins */}\r\n      <div className=\"relative\">\r\n        <RichTextPlugin\r\n          contentEditable={\r\n            <div className=\"\">\r\n              <div className=\"\" ref={onRef}>\r\n                <ContentEditable placeholder={'Start typing ...'} />\r\n              </div>\r\n            </div>\r\n          }\r\n          ErrorBoundary={LexicalErrorBoundary}\r\n        />\r\n        {/* editor plugins */}\r\n      </div>\r\n      {/* actions plugins */}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:block",
      "target": "components/blocks/editor-00/plugins.tsx"
    },
    {
      "path": "editor/themes/editor-theme.ts",
      "content": "import { EditorThemeClasses } from 'lexical'\r\n\r\nimport './editor-theme.css'\r\n\r\nexport const editorTheme: EditorThemeClasses = {\r\n  ltr: 'text-left',\r\n  rtl: 'text-right',\r\n  heading: {\r\n    h1: 'scroll-m-20 text-4xl font-extrabold tracking-tight lg:text-5xl',\r\n    h2: 'scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight first:mt-0',\r\n    h3: 'scroll-m-20 text-2xl font-semibold tracking-tight',\r\n    h4: 'scroll-m-20 text-xl font-semibold tracking-tight',\r\n    h5: 'scroll-m-20 text-lg font-semibold tracking-tight',\r\n    h6: 'scroll-m-20 text-base font-semibold tracking-tight',\r\n  },\r\n  paragraph: 'leading-7 [&:not(:first-child)]:mt-6',\r\n  quote: 'mt-6 border-l-2 pl-6 italic',\r\n  link: 'text-blue-600 hover:underline hover:cursor-pointer',\r\n  list: {\r\n    checklist: 'relative',\r\n    listitem: 'mx-8',\r\n    listitemChecked:\r\n      'relative mx-2 px-6 list-none outline-none line-through before:content-[\"\"] before:w-4 before:h-4 before:top-0.5 before:left-0 before:cursor-pointer before:block before:bg-cover before:absolute before:border before:border-primary before:rounded before:bg-primary before:bg-no-repeat after:content-[\"\"] after:cursor-pointer after:border-white after:border-solid after:absolute after:block after:top-[6px] after:w-[3px] after:left-[7px] after:right-[7px] after:h-[6px] after:rotate-45 after:border-r-2 after:border-b-2 after:border-l-0 after:border-t-0',\r\n    listitemUnchecked:\r\n      'relative mx-2 px-6 list-none outline-none before:content-[\"\"] before:w-4 before:h-4 before:top-0.5 before:left-0 before:cursor-pointer before:block before:bg-cover before:absolute before:border before:border-primary before:rounded',\r\n    nested: {\r\n      listitem: 'list-none before:hidden after:hidden',\r\n    },\r\n    ol: 'my-6 ml-6 list-decimal [&>li]:mt-2',\r\n    olDepth: [\r\n      'list-outside !list-decimal',\r\n      'list-outside !list-[upper-roman]',\r\n      'list-outside !list-[lower-roman]',\r\n      'list-outside !list-[upper-alpha]',\r\n      'list-outside !list-[lower-alpha]',\r\n    ],\r\n    ul: 'm-0 p-0 list-outside',\r\n  },\r\n  hashtag: 'text-blue-600 bg-blue-100 rounded-md px-1',\r\n  text: {\r\n    bold: 'font-bold',\r\n    code: 'bg-gray-100 p-1 rounded-md',\r\n    italic: 'italic',\r\n    strikethrough: 'line-through',\r\n    subscript: 'sub',\r\n    superscript: 'sup',\r\n    underline: 'underline',\r\n    underlineStrikethrough: 'underline line-through',\r\n  },\r\n  image: 'relative inline-block user-select-none cursor-default editor-image',\r\n  inlineImage:\r\n    'relative inline-block user-select-none cursor-default inline-editor-image',\r\n  keyword: 'text-purple-900 font-bold',\r\n  code: 'EditorTheme__code',\r\n  codeHighlight: {\r\n    atrule: 'EditorTheme__tokenAttr',\r\n    attr: 'EditorTheme__tokenAttr',\r\n    boolean: 'EditorTheme__tokenProperty',\r\n    builtin: 'EditorTheme__tokenSelector',\r\n    cdata: 'EditorTheme__tokenComment',\r\n    char: 'EditorTheme__tokenSelector',\r\n    class: 'EditorTheme__tokenFunction',\r\n    'class-name': 'EditorTheme__tokenFunction',\r\n    comment: 'EditorTheme__tokenComment',\r\n    constant: 'EditorTheme__tokenProperty',\r\n    deleted: 'EditorTheme__tokenProperty',\r\n    doctype: 'EditorTheme__tokenComment',\r\n    entity: 'EditorTheme__tokenOperator',\r\n    function: 'EditorTheme__tokenFunction',\r\n    important: 'EditorTheme__tokenVariable',\r\n    inserted: 'EditorTheme__tokenSelector',\r\n    keyword: 'EditorTheme__tokenAttr',\r\n    namespace: 'EditorTheme__tokenVariable',\r\n    number: 'EditorTheme__tokenProperty',\r\n    operator: 'EditorTheme__tokenOperator',\r\n    prolog: 'EditorTheme__tokenComment',\r\n    property: 'EditorTheme__tokenProperty',\r\n    punctuation: 'EditorTheme__tokenPunctuation',\r\n    regex: 'EditorTheme__tokenVariable',\r\n    selector: 'EditorTheme__tokenSelector',\r\n    string: 'EditorTheme__tokenSelector',\r\n    symbol: 'EditorTheme__tokenProperty',\r\n    tag: 'EditorTheme__tokenProperty',\r\n    url: 'EditorTheme__tokenOperator',\r\n    variable: 'EditorTheme__tokenVariable',\r\n  },\r\n  characterLimit: '!bg-destructive/50',\r\n  table: 'EditorTheme__table w-fit overflow-scroll border-collapse',\r\n  tableCell:\r\n    'EditorTheme__tableCell w-24 relative border px-4 py-2 text-left [&[align=center]]:text-center [&[align=right]]:text-right\"',\r\n  tableCellActionButton:\r\n    'EditorTheme__tableCellActionButton bg-background block border-0 rounded-2xl w-5 h-5 text-foreground cursor-pointer',\r\n  tableCellActionButtonContainer:\r\n    'EditorTheme__tableCellActionButtonContainer block right-1 top-1.5 absolute z-10 w-5 h-5',\r\n  tableCellEditing: 'EditorTheme__tableCellEditing rounded-sm shadow-sm',\r\n  tableCellHeader:\r\n    'EditorTheme__tableCellHeader bg-muted border px-4 py-2 text-left font-bold [&[align=center]]:text-center [&[align=right]]:text-right',\r\n  tableCellPrimarySelected:\r\n    'EditorTheme__tableCellPrimarySelected border border-primary border-solid block h-[calc(100%-2px)] w-[calc(100%-2px)] absolute -left-[1px] -top-[1px] z-10 ',\r\n  tableCellResizer:\r\n    'EditorTheme__tableCellResizer absolute -right-1 h-full w-2 cursor-ew-resize z-10 top-0',\r\n  tableCellSelected: 'EditorTheme__tableCellSelected bg-muted',\r\n  tableCellSortedIndicator:\r\n    'EditorTheme__tableCellSortedIndicator block opacity-50 bsolute bottom-0 left-0 w-full h-1 bg-muted',\r\n  tableResizeRuler:\r\n    'EditorTheme__tableCellResizeRuler block absolute w-[1px] h-full bg-primary top-0',\r\n  tableRowStriping:\r\n    'EditorTheme__tableRowStriping m-0 border-t p-0 even:bg-muted',\r\n  tableSelected: 'EditorTheme__tableSelected ring-2 ring-primary ring-offset-2',\r\n  tableSelection: 'EditorTheme__tableSelection bg-transparent',\r\n  layoutItem: 'border border-dashed px-4 py-2',\r\n  layoutContainer: 'grid gap-2.5 my-2.5 mx-0',\r\n  autocomplete: 'text-muted-foreground',\r\n  blockCursor: '',\r\n  embedBlock: {\r\n    base: 'user-select-none',\r\n    focus: 'ring-2 ring-primary ring-offset-2',\r\n  },\r\n  hr: 'p-0.5 border-none my-1 mx-0 cursor-pointer after:content-[\"\"] after:block after:h-0.5 after:bg-muted selected:ring-2 selected:ring-primary selected:ring-offset-2 selected:user-select-none',\r\n  indent: '[--lexical-indent-base-value:40px]',\r\n  mark: '',\r\n  markOverlap: '',\r\n}\r\n",
      "type": "registry:theme",
      "target": "components/editor/themes/editor-theme.ts"
    },
    {
      "path": "editor/themes/editor-theme.css",
      "content": ".EditorTheme__code {\r\n  background-color: transparent;\r\n  font-family: Menlo, Consolas, Monaco, monospace;\r\n  display: block;\r\n  padding: 8px 8px 8px 52px;\r\n  line-height: 1.53;\r\n  font-size: 13px;\r\n  margin: 0;\r\n  margin-top: 8px;\r\n  margin-bottom: 8px;\r\n  overflow-x: auto;\r\n  border: 1px solid #ccc;\r\n  position: relative;\r\n  border-radius: 8px;\r\n  tab-size: 2;\r\n}\r\n.EditorTheme__code:before {\r\n  content: attr(data-gutter);\r\n  position: absolute;\r\n  background-color: transparent;\r\n  border-right: 1px solid #ccc;\r\n  left: 0;\r\n  top: 0;\r\n  padding: 8px;\r\n  color: #777;\r\n  white-space: pre-wrap;\r\n  text-align: right;\r\n  min-width: 25px;\r\n}\r\n.EditorTheme__table {\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n  overflow-y: scroll;\r\n  overflow-x: scroll;\r\n  table-layout: fixed;\r\n  width: fit-content;\r\n  width: 100%;\r\n  margin: 0px 25px 30px 0px;\r\n}\r\n.EditorTheme__tokenComment {\r\n  color: slategray;\r\n}\r\n.EditorTheme__tokenPunctuation {\r\n  color: #999;\r\n}\r\n.EditorTheme__tokenProperty {\r\n  color: #905;\r\n}\r\n.EditorTheme__tokenSelector {\r\n  color: #690;\r\n}\r\n.EditorTheme__tokenOperator {\r\n  color: #9a6e3a;\r\n}\r\n.EditorTheme__tokenAttr {\r\n  color: #07a;\r\n}\r\n.EditorTheme__tokenVariable {\r\n  color: #e90;\r\n}\r\n.EditorTheme__tokenFunction {\r\n  color: #dd4a68;\r\n}\r\n\r\n.Collapsible__container {\r\n  background-color: var(--background);\r\n  border: 1px solid #ccc;\r\n  border-radius: 0.5rem;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.Collapsible__title{\r\n  padding: 0.25rem;\r\n  padding-left: 1rem;\r\n  position: relative;\r\n  font-weight: bold;\r\n  outline: none;\r\n  cursor: pointer;\r\n  list-style-type: disclosure-closed;\r\n  list-style-position: inside;\r\n}\r\n\r\n.Collapsible__title p{\r\n  display: inline-flex;\r\n}\r\n.Collapsible__title::marker{\r\n  color: lightgray;\r\n}\r\n.Collapsible__container[open] >.Collapsible__title {\r\n  list-style-type: disclosure-open;\r\n}\r\n",
      "type": "registry:theme",
      "target": "components/editor/themes/editor-theme.css"
    },
    {
      "path": "editor/editor-ui/content-editable.tsx",
      "content": "import { JSX } from 'react'\r\nimport { ContentEditable as LexicalContentEditable } from '@lexical/react/LexicalContentEditable'\r\n\r\ntype Props = {\r\n  placeholder: string\r\n  className?: string\r\n  placeholderClassName?: string\r\n}\r\n\r\n\r\nexport function ContentEditable({\r\n  placeholder,\r\n  className,\r\n  placeholderClassName,\r\n}: Props): JSX.Element {\r\n  return (\r\n    <LexicalContentEditable\r\n      className={\r\n        className ??\r\n        `ContentEditable__root relative block min-h-72 overflow-auto min-h-full px-8 py-4 focus:outline-none`\r\n      }\r\n      aria-placeholder={placeholder}\r\n      placeholder={\r\n        <div\r\n          className={\r\n            placeholderClassName ??\r\n\r\n            `pointer-events-none absolute left-0 top-0 select-none overflow-hidden text-ellipsis px-8 py-[18px] text-muted-foreground`\r\n          }\r\n        >\r\n          {placeholder}\r\n        </div>\r\n      }\r\n    />\r\n  )\r\n}\r\n",
      "type": "registry:ui",
      "target": "components/editor/editor-ui/content-editable.tsx"
    }
  ]
}