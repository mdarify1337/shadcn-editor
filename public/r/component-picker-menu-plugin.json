{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "component-picker-menu-plugin",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "files": [
    {
      "path": "editor/plugins/component-picker-menu-plugin.tsx",
      "content": "'use client'\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nimport { useCallback, useMemo, useState, JSX } from 'react'\r\nimport { createPortal } from 'react-dom'\r\n\r\nimport dynamic from 'next/dynamic'\r\n\r\nimport { TextNode } from 'lexical'\r\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\r\nimport { useBasicTypeaheadTriggerMatch } from '@lexical/react/LexicalTypeaheadMenuPlugin'\r\n\r\nimport { Command, CommandGroup, CommandItem, CommandList } from '@/registry/default/ui/command'\r\n\r\nimport { useEditorModal } from '@/registry/default/editor/editor-hooks/use-modal'\r\nimport { ComponentPickerOption } from './picker/component-picker-option'\r\n\r\nconst LexicalTypeaheadMenuPlugin = dynamic(\r\n  () => import('./default/lexical-typeahead-menu-plugin'),\r\n  { ssr: false }\r\n)\r\n\r\nexport function ComponentPickerMenuPlugin({\r\n  baseOptions = [],\r\n  dynamicOptionsFn,\r\n}: {\r\n  baseOptions?: Array<ComponentPickerOption>\r\n  dynamicOptionsFn?: ({ queryString }: { queryString: string }) => Array<ComponentPickerOption>\r\n}): JSX.Element {\r\n  const [editor] = useLexicalComposerContext()\r\n  const [modal, showModal] = useEditorModal()\r\n  const [queryString, setQueryString] = useState<string | null>(null)\r\n\r\n  const checkForTriggerMatch = useBasicTypeaheadTriggerMatch('/', {\r\n    minLength: 0,\r\n  })\r\n\r\n  const options = useMemo(() => {\r\n    if (!queryString) {\r\n      return baseOptions\r\n    }\r\n\r\n    const regex = new RegExp(queryString, 'i')\r\n\r\n    return [\r\n      ...dynamicOptionsFn?.({ queryString }) || [],\r\n      ...baseOptions.filter(\r\n        (option) =>\r\n          regex.test(option.title) ||\r\n          option.keywords.some((keyword) => regex.test(keyword))\r\n      ),\r\n    ]\r\n  }, [editor, queryString, showModal])\r\n\r\n  const onSelectOption = useCallback(\r\n    (\r\n      selectedOption: ComponentPickerOption,\r\n      nodeToRemove: TextNode | null,\r\n      closeMenu: () => void,\r\n      matchingString: string\r\n    ) => {\r\n      editor.update(() => {\r\n        nodeToRemove?.remove()\r\n        selectedOption.onSelect(matchingString, editor, showModal)\r\n        closeMenu()\r\n      })\r\n    },\r\n    [editor]\r\n  )\r\n\r\n  return (\r\n    <>\r\n      {modal}\r\n      {/* @ts-ignore */}\r\n      <LexicalTypeaheadMenuPlugin<ComponentPickerOption>\r\n        onQueryChange={setQueryString}\r\n        onSelectOption={onSelectOption}\r\n        triggerFn={checkForTriggerMatch}\r\n        options={options}\r\n        menuRenderFn={(\r\n          anchorElementRef,\r\n          { selectedIndex, selectOptionAndCleanUp, setHighlightedIndex }\r\n        ) => {\r\n          return anchorElementRef.current && options.length\r\n            ? createPortal(\r\n              <div className=\"fixed w-[250px] rounded-md shadow-md\">\r\n                <Command\r\n                  onKeyDown={(e) => {\r\n                    if (e.key === 'ArrowUp') {\r\n                      e.preventDefault()\r\n                      setHighlightedIndex(\r\n                        selectedIndex !== null\r\n                          ? (selectedIndex - 1 + options.length) %\r\n                          options.length\r\n                          : options.length - 1\r\n                      )\r\n                    } else if (e.key === 'ArrowDown') {\r\n                      e.preventDefault()\r\n                      setHighlightedIndex(\r\n                        selectedIndex !== null\r\n                          ? (selectedIndex + 1) % options.length\r\n                          : 0\r\n                      )\r\n                    }\r\n                  }}\r\n                >\r\n                  <CommandList>\r\n                    <CommandGroup>\r\n                      {options.map((option, index) => (\r\n                        <CommandItem\r\n                          key={option.key}\r\n                          value={option.title}\r\n                          onSelect={() => {\r\n                            selectOptionAndCleanUp(option)\r\n                          }}\r\n                          className={`flex items-center gap-2 ${selectedIndex === index\r\n                              ? 'bg-accent'\r\n                              : '!bg-transparent'\r\n                            }`}\r\n                        >\r\n                          {option.icon}\r\n                          {option.title}\r\n                        </CommandItem>\r\n                      ))}\r\n                    </CommandGroup>\r\n                  </CommandList>\r\n                </Command>\r\n              </div>,\r\n              anchorElementRef.current\r\n            )\r\n            : null\r\n        }}\r\n      />\r\n    </>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/component-picker-menu-plugin.tsx"
    }
  ]
}