{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "table-plugin",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "files": [
    {
      "path": "editor/plugins/table-plugin.tsx",
      "content": "'use client'\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nimport { createContext, useContext, useEffect, useMemo, useState, JSX } from 'react'\r\nimport * as React from 'react'\r\n\r\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\r\nimport {\r\n  $createTableNodeWithDimensions,\r\n  INSERT_TABLE_COMMAND,\r\n  TableNode,\r\n} from '@lexical/table'\r\nimport {\r\n  $insertNodes,\r\n  COMMAND_PRIORITY_EDITOR,\r\n  EditorThemeClasses,\r\n  Klass,\r\n  LexicalCommand,\r\n  LexicalEditor,\r\n  LexicalNode,\r\n  createCommand,\r\n} from 'lexical'\r\n\r\nimport { Button } from '@/registry/default/ui/button'\r\nimport { DialogFooter } from '@/registry/default/ui/dialog'\r\nimport { Input } from '@/registry/default/ui/input'\r\nimport { Label } from '@/registry/default/ui/label'\r\n\r\nimport { invariant } from '@/registry/default/editor/shared/invariant'\r\n\r\nexport type InsertTableCommandPayload = Readonly<{\r\n  columns: string\r\n  rows: string\r\n  includeHeaders?: boolean\r\n}>\r\n\r\nexport type CellContextShape = {\r\n  cellEditorConfig: null | CellEditorConfig\r\n  cellEditorPlugins: null | JSX.Element | Array<JSX.Element>\r\n  set: (\r\n    cellEditorConfig: null | CellEditorConfig,\r\n    cellEditorPlugins: null | JSX.Element | Array<JSX.Element>\r\n  ) => void\r\n}\r\n\r\nexport type CellEditorConfig = Readonly<{\r\n  namespace: string\r\n  nodes?: ReadonlyArray<Klass<LexicalNode>>\r\n  onError: (error: Error, editor: LexicalEditor) => void\r\n  readOnly?: boolean\r\n  theme?: EditorThemeClasses\r\n}>\r\n\r\nexport const INSERT_NEW_TABLE_COMMAND: LexicalCommand<InsertTableCommandPayload> =\r\n  createCommand('INSERT_NEW_TABLE_COMMAND')\r\n\r\nexport const CellContext = createContext<CellContextShape>({\r\n  cellEditorConfig: null,\r\n  cellEditorPlugins: null,\r\n  set: () => {\r\n    // Empty\r\n  },\r\n})\r\n\r\nexport function TableContext({ children }: { children: JSX.Element }) {\r\n  const [contextValue, setContextValue] = useState<{\r\n    cellEditorConfig: null | CellEditorConfig\r\n    cellEditorPlugins: null | JSX.Element | Array<JSX.Element>\r\n  }>({\r\n    cellEditorConfig: null,\r\n    cellEditorPlugins: null,\r\n  })\r\n  return (\r\n    <CellContext.Provider\r\n      value={useMemo(\r\n        () => ({\r\n          cellEditorConfig: contextValue.cellEditorConfig,\r\n          cellEditorPlugins: contextValue.cellEditorPlugins,\r\n          set: (cellEditorConfig, cellEditorPlugins) => {\r\n            setContextValue({ cellEditorConfig, cellEditorPlugins })\r\n          },\r\n        }),\r\n        [contextValue.cellEditorConfig, contextValue.cellEditorPlugins]\r\n      )}\r\n    >\r\n      {children}\r\n    </CellContext.Provider>\r\n  )\r\n}\r\n\r\nexport function InsertTableDialog({\r\n  activeEditor,\r\n  onClose,\r\n}: {\r\n  activeEditor: LexicalEditor\r\n  onClose: () => void\r\n}): JSX.Element {\r\n  const [rows, setRows] = useState('5')\r\n  const [columns, setColumns] = useState('5')\r\n  const [isDisabled, setIsDisabled] = useState(true)\r\n\r\n  useEffect(() => {\r\n    const row = Number(rows)\r\n    const column = Number(columns)\r\n    if (row && row > 0 && row <= 500 && column && column > 0 && column <= 50) {\r\n      setIsDisabled(false)\r\n    } else {\r\n      setIsDisabled(true)\r\n    }\r\n  }, [rows, columns])\r\n\r\n  const onClick = () => {\r\n    activeEditor.dispatchCommand(INSERT_TABLE_COMMAND, {\r\n      columns,\r\n      rows,\r\n    })\r\n\r\n    onClose()\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"grid gap-4\">\r\n        <div className=\"grid gap-2\">\r\n          <Label htmlFor=\"rows\">Number of rows</Label>\r\n          <Input\r\n            id=\"rows\"\r\n            placeholder={'# of rows (1-500)'}\r\n            onChange={(e) => setRows(e.target.value)}\r\n            value={rows}\r\n            data-test-id=\"table-modal-rows\"\r\n            type=\"number\"\r\n          />\r\n        </div>\r\n        <div className=\"grid gap-2\">\r\n          <Label htmlFor=\"columns\">Number of columns</Label>\r\n          <Input\r\n            id=\"columns\"\r\n            placeholder={'# of columns (1-50)'}\r\n            onChange={(e) => setColumns(e.target.value)}\r\n            value={columns}\r\n            data-test-id=\"table-modal-columns\"\r\n            type=\"number\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <DialogFooter data-test-id=\"table-model-confirm-insert\">\r\n        <Button disabled={isDisabled} onClick={onClick}>\r\n          Confirm\r\n        </Button>\r\n      </DialogFooter>\r\n    </>\r\n  )\r\n}\r\n\r\nexport function TablePlugin({\r\n  cellEditorConfig,\r\n  children,\r\n}: {\r\n  cellEditorConfig: CellEditorConfig\r\n  children: JSX.Element | Array<JSX.Element>\r\n}): JSX.Element | null {\r\n  const [editor] = useLexicalComposerContext()\r\n  const cellContext = useContext(CellContext)\r\n\r\n  useEffect(() => {\r\n    if (!editor.hasNodes([TableNode])) {\r\n      invariant(false, 'TablePlugin: TableNode is not registered on editor')\r\n    }\r\n\r\n    cellContext.set(cellEditorConfig, children)\r\n\r\n    return editor.registerCommand<InsertTableCommandPayload>(\r\n      INSERT_NEW_TABLE_COMMAND,\r\n      ({ columns, rows, includeHeaders }) => {\r\n        const tableNode = $createTableNodeWithDimensions(\r\n          Number(rows),\r\n          Number(columns),\r\n          includeHeaders\r\n        )\r\n        $insertNodes([tableNode])\r\n        return true\r\n      },\r\n      COMMAND_PRIORITY_EDITOR\r\n    )\r\n  }, [cellContext, cellEditorConfig, children, editor])\r\n\r\n  return null\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/table-plugin.tsx"
    }
  ]
}