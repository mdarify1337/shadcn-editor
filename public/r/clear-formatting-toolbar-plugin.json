{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "clear-formatting-toolbar-plugin",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@lexical/utils",
    "@lexical/table"
  ],
  "registryDependencies": [
    "button",
    "https://shadcn-editor.vercel.app/r/toolbar-plugin.json"
  ],
  "files": [
    {
      "path": "editor/plugins/toolbar/clear-formatting-toolbar-plugin.tsx",
      "content": "'use client'\r\n\r\nimport { useCallback } from 'react'\r\n\r\nimport { $isDecoratorBlockNode } from '@lexical/react/LexicalDecoratorBlockNode'\r\nimport { $isHeadingNode, $isQuoteNode } from '@lexical/rich-text'\r\nimport { $isTableSelection } from '@lexical/table'\r\nimport { $getNearestBlockElementAncestorOrThrow } from '@lexical/utils'\r\nimport {\r\n  $createParagraphNode,\r\n  $getSelection,\r\n  $isRangeSelection,\r\n  $isTextNode,\r\n} from 'lexical'\r\nimport { EraserIcon } from 'lucide-react'\r\n\r\nimport { Button } from '@/registry/default/ui/button'\r\n\r\nimport { useToolbarContext } from '@/registry/default/editor/context/toolbar-context'\r\n\r\nexport function ClearFormattingToolbarPlugin() {\r\n  const { activeEditor } = useToolbarContext()\r\n\r\n  const clearFormatting = useCallback(() => {\r\n    activeEditor.update(() => {\r\n      const selection = $getSelection()\r\n      if ($isRangeSelection(selection) || $isTableSelection(selection)) {\r\n        const anchor = selection.anchor\r\n        const focus = selection.focus\r\n        const nodes = selection.getNodes()\r\n        const extractedNodes = selection.extract()\r\n\r\n        if (anchor.key === focus.key && anchor.offset === focus.offset) {\r\n          return\r\n        }\r\n\r\n        nodes.forEach((node, idx) => {\r\n          // We split the first and last node by the selection\r\n          // So that we don't format unselected text inside those nodes\r\n          if ($isTextNode(node)) {\r\n            // Use a separate variable to ensure TS does not lose the refinement\r\n            let textNode = node\r\n            if (idx === 0 && anchor.offset !== 0) {\r\n              textNode = textNode.splitText(anchor.offset)[1] || textNode\r\n            }\r\n            if (idx === nodes.length - 1) {\r\n              textNode = textNode.splitText(focus.offset)[0] || textNode\r\n            }\r\n            /**\r\n             * If the selected text has one format applied\r\n             * selecting a portion of the text, could\r\n             * clear the format to the wrong portion of the text.\r\n             *\r\n             * The cleared text is based on the length of the selected text.\r\n             */\r\n            // We need this in case the selected text only has one format\r\n            const extractedTextNode = extractedNodes[0]\r\n            if (nodes.length === 1 && $isTextNode(extractedTextNode)) {\r\n              textNode = extractedTextNode\r\n            }\r\n\r\n            if (textNode.__style !== '') {\r\n              textNode.setStyle('')\r\n            }\r\n            if (textNode.__format !== 0) {\r\n              textNode.setFormat(0)\r\n              $getNearestBlockElementAncestorOrThrow(textNode).setFormat('')\r\n            }\r\n            node = textNode\r\n          } else if ($isHeadingNode(node) || $isQuoteNode(node)) {\r\n            node.replace($createParagraphNode(), true)\r\n          } else if ($isDecoratorBlockNode(node)) {\r\n            node.setFormat('')\r\n          }\r\n        })\r\n      }\r\n    })\r\n  }, [activeEditor])\r\n\r\n  return (\r\n    <Button\r\n      size={'sm'}\r\n      variant={'outline'}\r\n      className=\"h-8 w-8\"\r\n      onClick={clearFormatting}\r\n    >\r\n      <EraserIcon className=\"h-4 w-4\" />\r\n    </Button>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/clear-formatting-toolbar-plugin.tsx"
    }
  ]
}