{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "link-plugin",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "registryDependencies": [
    "https://shadcn-editor.vercel.app/r/rich-text-editor-plugin.json"
  ],
  "files": [
    {
      "path": "editor/plugins/link-plugin.tsx",
      "content": "'use client'\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nimport * as React from 'react'\r\nimport { JSX } from 'react'\r\n\r\nimport { LinkPlugin as LexicalLinkPlugin } from '@lexical/react/LexicalLinkPlugin'\r\n\r\nimport { validateUrl } from '@/registry/default/editor/utils/url'\r\n\r\nexport function LinkPlugin(): JSX.Element {\r\n  return <LexicalLinkPlugin validateUrl={validateUrl} />\r\n}\r\n\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/link-plugin.tsx"
    },
    {
      "path": "editor/utils/url.ts",
      "content": "const SUPPORTED_URL_PROTOCOLS = new Set([\r\n  'http:',\r\n  'https:',\r\n  'mailto:',\r\n  'sms:',\r\n  'tel:',\r\n])\r\n\r\nexport function sanitizeUrl(url: string): string {\r\n  try {\r\n    const parsedUrl = new URL(url)\r\n    // eslint-disable-next-line no-script-url\r\n    if (!SUPPORTED_URL_PROTOCOLS.has(parsedUrl.protocol)) {\r\n      return 'about:blank'\r\n    }\r\n  } catch {\r\n    return url\r\n  }\r\n  return url\r\n}\r\n\r\n// Source: https://stackoverflow.com/a/8234912/2013580\r\nconst urlRegExp = new RegExp(\r\n  /((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[\\w]*))?)/\r\n)\r\nexport function validateUrl(url: string): boolean {\r\n  // TODO Fix UI for link insertion; it should never default to an invalid URL such as https://.\r\n  // Maybe show a dialog where they user can type the URL before inserting it.\r\n  return url === 'https://' || urlRegExp.test(url)\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/utils/url.ts"
    }
  ]
}