{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "font-family-toolbar-plugin",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@lexical/selection"
  ],
  "registryDependencies": [
    "select",
    "https://shadcn-editor.vercel.app/r/toolbar-plugin.json"
  ],
  "files": [
    {
      "path": "editor/plugins/toolbar/font-family-toolbar-plugin.tsx",
      "content": "'use client'\r\n\r\nimport { useCallback, useState } from 'react'\r\n\r\nimport {\r\n  $getSelectionStyleValueForProperty,\r\n  $patchStyleText,\r\n} from '@lexical/selection'\r\nimport { $getSelection, $isRangeSelection, BaseSelection } from 'lexical'\r\nimport { TypeIcon } from 'lucide-react'\r\n\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n} from '@/registry/default/ui/select'\r\n\r\nimport { useToolbarContext } from '@/registry/default/editor/context/toolbar-context'\r\nimport { useUpdateToolbarHandler } from '@/registry/default/editor/editor-hooks/use-update-toolbar'\r\n\r\nconst FONT_FAMILY_OPTIONS = [\r\n  'Arial',\r\n  'Verdana',\r\n  'Times New Roman',\r\n  'Georgia',\r\n  'Courier New',\r\n  'Trebuchet MS',\r\n]\r\n\r\nexport function FontFamilyToolbarPlugin() {\r\n  const style = 'font-family'\r\n  const [fontFamily, setFontFamily] = useState('Arial')\r\n\r\n  const { activeEditor } = useToolbarContext()\r\n\r\n  const $updateToolbar = (selection: BaseSelection) => {\r\n    if ($isRangeSelection(selection)) {\r\n      setFontFamily(\r\n        $getSelectionStyleValueForProperty(selection, 'font-family', 'Arial')\r\n      )\r\n    }\r\n  }\r\n\r\n  useUpdateToolbarHandler($updateToolbar)\r\n\r\n  const handleClick = useCallback(\r\n    (option: string) => {\r\n      activeEditor.update(() => {\r\n        const selection = $getSelection()\r\n        if (selection !== null) {\r\n          $patchStyleText(selection, {\r\n            [style]: option,\r\n          })\r\n        }\r\n      })\r\n    },\r\n    [activeEditor, style]\r\n  )\r\n\r\n  const buttonAriaLabel = 'Formatting options for font family'\r\n\r\n  return (\r\n    <Select\r\n      value={fontFamily}\r\n      onValueChange={(value) => {\r\n        setFontFamily(value)\r\n        handleClick(value)\r\n      }}\r\n      aria-label={buttonAriaLabel}\r\n    >\r\n      <SelectTrigger className=\"h-8 w-min gap-1\">\r\n        <TypeIcon className=\"size-4\" />\r\n        <span>{fontFamily}</span>\r\n      </SelectTrigger>\r\n      <SelectContent>\r\n        {FONT_FAMILY_OPTIONS.map((option) => (\r\n          <SelectItem key={option} value={option}>\r\n            {option}\r\n          </SelectItem>\r\n        ))}\r\n      </SelectContent>\r\n    </Select>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/font-family-toolbar-plugin.tsx"
    },
    {
      "path": "editor/editor-hooks/use-update-toolbar.ts",
      "content": "import { useEffect } from 'react'\r\n\r\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\r\nimport {\r\n  $getSelection,\r\n  BaseSelection,\r\n  COMMAND_PRIORITY_CRITICAL,\r\n} from 'lexical'\r\nimport { SELECTION_CHANGE_COMMAND } from 'lexical'\r\n\r\nimport { useToolbarContext } from '@/registry/default/editor/context/toolbar-context'\r\n\r\nexport function useUpdateToolbarHandler(\r\n  callback: (selection: BaseSelection) => void\r\n) {\r\n  const [editor] = useLexicalComposerContext()\r\n  const { activeEditor } = useToolbarContext()\r\n\r\n  useEffect(() => {\r\n    return activeEditor.registerCommand(\r\n      SELECTION_CHANGE_COMMAND,\r\n      () => {\r\n        const selection = $getSelection()\r\n        if (selection) {\r\n          callback(selection)\r\n        }\r\n        return false\r\n      },\r\n      COMMAND_PRIORITY_CRITICAL\r\n    )\r\n  }, [editor, callback])\r\n\r\n  useEffect(() => {\r\n    activeEditor.getEditorState().read(() => {\r\n      const selection = $getSelection()\r\n      if (selection) {\r\n        callback(selection)\r\n      }\r\n    })\r\n  }, [activeEditor, callback])\r\n}\r\n",
      "type": "registry:hook",
      "target": "components/editor/editor-hooks/use-update-toolbar.ts"
    }
  ]
}