{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "excalidraw-plugin",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@excalidraw/excalidraw",
    "@lexical/utils"
  ],
  "registryDependencies": [
    "button",
    "dialog",
    "select",
    "https://shadcn-editor.vercel.app/r/toolbar-plugin.json"
  ],
  "files": [
    {
      "path": "editor/plugins/excalidraw-plugin.tsx",
      "content": "'use client'\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nimport { useEffect, useState, JSX } from 'react'\r\n\r\nimport type { AppState, BinaryFiles } from '@excalidraw/excalidraw/types/types'\r\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\r\nimport { $wrapNodeInElement } from '@lexical/utils'\r\nimport {\r\n  $createParagraphNode,\r\n  $insertNodes,\r\n  $isRootOrShadowRoot,\r\n  COMMAND_PRIORITY_EDITOR,\r\n  LexicalCommand,\r\n  createCommand,\r\n} from 'lexical'\r\n\r\nimport { $createExcalidrawNode, ExcalidrawNode } from '@/registry/default/editor/nodes/excalidraw-node'\r\nimport type { ExcalidrawInitialElements } from '@/registry/default/editor/editor-ui/excalidraw-modal'\r\nimport { ExcalidrawModal } from '@/registry/default/editor/editor-ui/excalidraw-modal'\r\n\r\nexport const INSERT_EXCALIDRAW_COMMAND: LexicalCommand<void> = createCommand(\r\n  'INSERT_EXCALIDRAW_COMMAND'\r\n)\r\n\r\nexport function ExcalidrawPlugin(): JSX.Element | null {\r\n  const [editor] = useLexicalComposerContext()\r\n  const [isModalOpen, setModalOpen] = useState<boolean>(false)\r\n\r\n  useEffect(() => {\r\n    if (!editor.hasNodes([ExcalidrawNode])) {\r\n      throw new Error(\r\n        'ExcalidrawPlugin: ExcalidrawNode not registered on editor'\r\n      )\r\n    }\r\n\r\n    return editor.registerCommand(\r\n      INSERT_EXCALIDRAW_COMMAND,\r\n      () => {\r\n        setModalOpen(true)\r\n        return true\r\n      },\r\n      COMMAND_PRIORITY_EDITOR\r\n    )\r\n  }, [editor])\r\n\r\n  const onClose = () => {\r\n    setModalOpen(false)\r\n  }\r\n\r\n  const onDelete = () => {\r\n    setModalOpen(false)\r\n  }\r\n\r\n  const onSave = (\r\n    elements: ExcalidrawInitialElements,\r\n    appState: Partial<AppState>,\r\n    files: BinaryFiles\r\n  ) => {\r\n    editor.update(() => {\r\n      const excalidrawNode = $createExcalidrawNode()\r\n      excalidrawNode.setData(\r\n        JSON.stringify({\r\n          appState,\r\n          elements,\r\n          files,\r\n        })\r\n      )\r\n      $insertNodes([excalidrawNode])\r\n      if ($isRootOrShadowRoot(excalidrawNode.getParentOrThrow())) {\r\n        $wrapNodeInElement(excalidrawNode, $createParagraphNode).selectEnd()\r\n      }\r\n    })\r\n    setModalOpen(false)\r\n  }\r\n  return (\r\n    <ExcalidrawModal\r\n      initialElements={[]}\r\n      initialAppState={{} as AppState}\r\n      initialFiles={{}}\r\n      isShown={isModalOpen}\r\n      onDelete={onDelete}\r\n      onClose={onClose}\r\n      onSave={onSave}\r\n      closeOnClickOutside={false}\r\n    />\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/excalidraw-plugin.tsx"
    },
    {
      "path": "editor/nodes/excalidraw-node.tsx",
      "content": "import * as React from 'react'\r\nimport { Suspense, JSX } from 'react'\r\n\r\nimport type {\r\n  DOMConversionMap,\r\n  DOMConversionOutput,\r\n  DOMExportOutput,\r\n  EditorConfig,\r\n  LexicalEditor,\r\n  LexicalNode,\r\n  NodeKey,\r\n  SerializedLexicalNode,\r\n  Spread,\r\n} from 'lexical'\r\nimport { DecoratorNode } from 'lexical'\r\n\r\ntype Dimension = number | 'inherit'\r\n\r\nconst ExcalidrawComponent = React.lazy(\r\n  () => import('../editor-ui/excalidraw-component')\r\n)\r\n\r\nexport type SerializedExcalidrawNode = Spread<\r\n  {\r\n    data: string\r\n    width?: Dimension\r\n    height?: Dimension\r\n  },\r\n  SerializedLexicalNode\r\n>\r\n\r\nfunction $convertExcalidrawElement(\r\n  domNode: HTMLElement\r\n): DOMConversionOutput | null {\r\n  const excalidrawData = domNode.getAttribute('data-lexical-excalidraw-json')\r\n  const styleAttributes = window.getComputedStyle(domNode)\r\n  const heightStr = styleAttributes.getPropertyValue('height')\r\n  const widthStr = styleAttributes.getPropertyValue('width')\r\n  const height =\r\n    !heightStr || heightStr === 'inherit' ? 'inherit' : parseInt(heightStr, 10)\r\n  const width =\r\n    !widthStr || widthStr === 'inherit' ? 'inherit' : parseInt(widthStr, 10)\r\n\r\n  if (excalidrawData) {\r\n    const node = $createExcalidrawNode(excalidrawData, width, height)\r\n    return {\r\n      node,\r\n    }\r\n  }\r\n  return null\r\n}\r\n\r\nexport class ExcalidrawNode extends DecoratorNode<JSX.Element> {\r\n  __data: string\r\n  __width: Dimension\r\n  __height: Dimension\r\n\r\n  static getType(): string {\r\n    return 'excalidraw'\r\n  }\r\n\r\n  static clone(node: ExcalidrawNode): ExcalidrawNode {\r\n    return new ExcalidrawNode(\r\n      node.__data,\r\n      node.__width,\r\n      node.__height,\r\n      node.__key\r\n    )\r\n  }\r\n\r\n  static importJSON(serializedNode: SerializedExcalidrawNode): ExcalidrawNode {\r\n    return new ExcalidrawNode(\r\n      serializedNode.data,\r\n      serializedNode.width ?? 'inherit',\r\n      serializedNode.height ?? 'inherit'\r\n    )\r\n  }\r\n\r\n  exportJSON(): SerializedExcalidrawNode {\r\n    return {\r\n      data: this.__data,\r\n      height: this.__height === 'inherit' ? undefined : this.__height,\r\n      type: 'excalidraw',\r\n      version: 1,\r\n      width: this.__width === 'inherit' ? undefined : this.__width,\r\n    }\r\n  }\r\n\r\n  constructor(\r\n    data = '[]',\r\n    width: Dimension = 'inherit',\r\n    height: Dimension = 'inherit',\r\n    key?: NodeKey\r\n  ) {\r\n    super(key)\r\n    this.__data = data\r\n    this.__width = width\r\n    this.__height = height\r\n  }\r\n\r\n  // View\r\n  createDOM(config: EditorConfig): HTMLElement {\r\n    const span = document.createElement('span')\r\n    const theme = config.theme\r\n    const className = theme.image\r\n    if (className !== undefined) {\r\n      span.className = className\r\n    }\r\n    return span\r\n  }\r\n\r\n  updateDOM(): false {\r\n    return false\r\n  }\r\n\r\n  static importDOM(): DOMConversionMap<HTMLSpanElement> | null {\r\n    return {\r\n      span: (domNode: HTMLSpanElement) => {\r\n        if (!domNode.hasAttribute('data-lexical-excalidraw-json')) {\r\n          return null\r\n        }\r\n        return {\r\n          conversion: $convertExcalidrawElement,\r\n          priority: 1,\r\n        }\r\n      },\r\n    }\r\n  }\r\n\r\n  exportDOM(editor: LexicalEditor): DOMExportOutput {\r\n    const element = document.createElement('span')\r\n\r\n    element.style.display = 'inline-block'\r\n\r\n    const content = editor.getElementByKey(this.getKey())\r\n    if (content !== null) {\r\n      const svg = content.querySelector('svg')\r\n      if (svg !== null) {\r\n        element.innerHTML = svg.outerHTML\r\n      }\r\n    }\r\n\r\n    element.style.width =\r\n      this.__width === 'inherit' ? 'inherit' : `${this.__width}px`\r\n    element.style.height =\r\n      this.__height === 'inherit' ? 'inherit' : `${this.__height}px`\r\n\r\n    element.setAttribute('data-lexical-excalidraw-json', this.__data)\r\n    return { element }\r\n  }\r\n\r\n  setData(data: string): void {\r\n    const self = this.getWritable()\r\n    self.__data = data\r\n  }\r\n\r\n  getWidth(): Dimension {\r\n    return this.getLatest().__width\r\n  }\r\n\r\n  setWidth(width: Dimension): void {\r\n    const self = this.getWritable()\r\n    self.__width = width\r\n  }\r\n\r\n  getHeight(): Dimension {\r\n    return this.getLatest().__height\r\n  }\r\n\r\n  setHeight(height: Dimension): void {\r\n    const self = this.getWritable()\r\n    self.__height = height\r\n  }\r\n\r\n  decorate(editor: LexicalEditor, config: EditorConfig): JSX.Element {\r\n    return (\r\n      <Suspense fallback={null}>\r\n        <ExcalidrawComponent\r\n          nodeKey={this.getKey()}\r\n          data={this.__data}\r\n          width={this.__width}\r\n          height={this.__height}\r\n        />\r\n      </Suspense>\r\n    )\r\n  }\r\n}\r\n\r\nexport function $createExcalidrawNode(\r\n  data: string = '[]',\r\n  width: Dimension = 'inherit',\r\n  height: Dimension = 'inherit'\r\n): ExcalidrawNode {\r\n  return new ExcalidrawNode(data, width, height)\r\n}\r\n\r\nexport function $isExcalidrawNode(\r\n  node: LexicalNode | null | undefined\r\n): node is ExcalidrawNode {\r\n  return node instanceof ExcalidrawNode\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/nodes/excalidraw-node.tsx"
    },
    {
      "path": "editor/editor-ui/excalidraw-modal.tsx",
      "content": "import * as React from 'react'\r\nimport {\r\n  ReactElement,\r\n  useEffect,\r\n  useLayoutEffect,\r\n  useRef,\r\n  useState,\r\n  JSX\r\n} from 'react'\r\n\r\nimport dynamic from 'next/dynamic'\r\n\r\nimport {\r\n  AppState,\r\n  BinaryFiles,\r\n  ExcalidrawImperativeAPI,\r\n  ExcalidrawInitialDataState,\r\n} from '@excalidraw/excalidraw/types/types'\r\nimport { DialogTrigger } from '@radix-ui/react-dialog'\r\n\r\nimport { Button } from '@/registry/default/ui/button'\r\nimport {\r\n  Dialog,\r\n  DialogClose,\r\n  DialogContent,\r\n  DialogFooter,\r\n} from '@/registry/default/ui/dialog'\r\n\r\nconst Excalidraw = dynamic(() => import('./excalidraw'), { ssr: false })\r\n\r\nexport type ExcalidrawInitialElements = ExcalidrawInitialDataState['elements']\r\n\r\ntype Props = {\r\n  closeOnClickOutside?: boolean\r\n  /**\r\n   * The initial set of elements to draw into the scene\r\n   */\r\n  initialElements: ExcalidrawInitialElements\r\n  /**\r\n   * The initial set of elements to draw into the scene\r\n   */\r\n  initialAppState: AppState\r\n  /**\r\n   * The initial set of elements to draw into the scene\r\n   */\r\n  initialFiles: BinaryFiles\r\n  /**\r\n   * Controls the visibility of the modal\r\n   */\r\n  isShown?: boolean\r\n  /**\r\n   * Callback when closing and discarding the new changes\r\n   */\r\n  onClose: () => void\r\n  /**\r\n   * Completely remove Excalidraw component\r\n   */\r\n  onDelete: () => void\r\n  /**\r\n   * Callback when the save button is clicked\r\n   */\r\n  onSave: (\r\n    elements: ExcalidrawInitialElements,\r\n    appState: Partial<AppState>,\r\n    files: BinaryFiles\r\n  ) => void\r\n}\r\n\r\nexport const useCallbackRefState = () => {\r\n  const [refValue, setRefValue] =\r\n    React.useState<ExcalidrawImperativeAPI | null>(null)\r\n  const refCallback = React.useCallback(\r\n    (value: ExcalidrawImperativeAPI | null) => setRefValue(value),\r\n    []\r\n  )\r\n  return [refValue, refCallback] as const\r\n}\r\n\r\n/**\r\n * @explorer-desc\r\n * A component which renders a modal with Excalidraw (a painting app)\r\n * which can be used to export an editable image\r\n */\r\nexport function ExcalidrawModal({\r\n  closeOnClickOutside = false,\r\n  onSave,\r\n  initialElements,\r\n  initialAppState,\r\n  initialFiles,\r\n  isShown = false,\r\n  onDelete,\r\n  onClose,\r\n}: Props): ReactElement | null {\r\n  const excaliDrawModelRef = useRef<HTMLDivElement | null>(null)\r\n  const [excalidrawAPI, excalidrawAPIRefCallback] = useCallbackRefState()\r\n  const [discardModalOpen, setDiscardModalOpen] = useState(false)\r\n  const [elements, setElements] =\r\n    useState<ExcalidrawInitialElements>(initialElements)\r\n  const [files, setFiles] = useState<BinaryFiles>(initialFiles)\r\n\r\n  useEffect(() => {\r\n    if (excaliDrawModelRef.current !== null) {\r\n      excaliDrawModelRef.current.focus()\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    let modalOverlayElement: HTMLElement | null = null\r\n\r\n    const clickOutsideHandler = (event: MouseEvent) => {\r\n      const target = event.target\r\n      if (\r\n        excaliDrawModelRef.current !== null &&\r\n        !excaliDrawModelRef.current.contains(target as Node) &&\r\n        closeOnClickOutside\r\n      ) {\r\n        onDelete()\r\n      }\r\n    }\r\n\r\n    if (excaliDrawModelRef.current !== null) {\r\n      modalOverlayElement = excaliDrawModelRef.current?.parentElement\r\n      if (modalOverlayElement !== null) {\r\n        modalOverlayElement?.addEventListener('click', clickOutsideHandler)\r\n      }\r\n    }\r\n\r\n    return () => {\r\n      if (modalOverlayElement !== null) {\r\n        modalOverlayElement?.removeEventListener('click', clickOutsideHandler)\r\n      }\r\n    }\r\n  }, [closeOnClickOutside, onDelete])\r\n\r\n  useLayoutEffect(() => {\r\n    const currentModalRef = excaliDrawModelRef.current\r\n\r\n    const onKeyDown = (event: KeyboardEvent) => {\r\n      if (event.key === 'Escape') {\r\n        onDelete()\r\n      }\r\n    }\r\n\r\n    if (currentModalRef !== null) {\r\n      currentModalRef.addEventListener('keydown', onKeyDown)\r\n    }\r\n\r\n    return () => {\r\n      if (currentModalRef !== null) {\r\n        currentModalRef.removeEventListener('keydown', onKeyDown)\r\n      }\r\n    }\r\n  }, [elements, files, onDelete])\r\n\r\n  const save = () => {\r\n    if (elements && elements.filter((el) => !el.isDeleted).length > 0) {\r\n      const appState = excalidrawAPI?.getAppState()\r\n      // We only need a subset of the state\r\n      const partialState: Partial<AppState> = {\r\n        exportBackground: appState?.exportBackground,\r\n        exportScale: appState?.exportScale,\r\n        exportWithDarkMode: appState?.theme === 'dark',\r\n        isBindingEnabled: appState?.isBindingEnabled,\r\n        isLoading: appState?.isLoading,\r\n        name: appState?.name,\r\n        theme: appState?.theme,\r\n        viewBackgroundColor: appState?.viewBackgroundColor,\r\n        viewModeEnabled: appState?.viewModeEnabled,\r\n        zenModeEnabled: appState?.zenModeEnabled,\r\n        zoom: appState?.zoom,\r\n      }\r\n      onSave(elements, partialState, files)\r\n    } else {\r\n      // delete node if the scene is clear\r\n      onDelete()\r\n    }\r\n  }\r\n\r\n  const discard = () => {\r\n    setDiscardModalOpen(true)\r\n  }\r\n\r\n  function ShowDiscardDialog(): JSX.Element {\r\n    return (\r\n      <Dialog open={discardModalOpen} onOpenChange={setDiscardModalOpen}>\r\n        <DialogContent>\r\n          Are you sure you want to discard the changes?\r\n        </DialogContent>\r\n        <DialogClose asChild>\r\n          <Button\r\n            onClick={() => {\r\n              setDiscardModalOpen(false)\r\n              onClose()\r\n            }}\r\n          >\r\n            Discard\r\n          </Button>\r\n        </DialogClose>\r\n        <DialogClose asChild>\r\n          <Button onClick={() => setDiscardModalOpen(false)}>Cancel</Button>\r\n        </DialogClose>\r\n      </Dialog>\r\n    )\r\n  }\r\n\r\n  if (isShown === false) {\r\n    return null\r\n  }\r\n\r\n  const onChange = (\r\n    els: ExcalidrawInitialElements,\r\n    _: AppState,\r\n    fls: BinaryFiles\r\n  ) => {\r\n    setElements(els)\r\n    setFiles(fls)\r\n  }\r\n\r\n  return (\r\n    <Dialog open={isShown}>\r\n      <DialogTrigger />\r\n      <DialogContent className=\"h-4/6 max-w-4xl overflow-hidden p-0\">\r\n        <div className=\"relative\" role=\"dialog\">\r\n          <div className=\"h-full w-full\" ref={excaliDrawModelRef} tabIndex={-1}>\r\n            <div className=\"h-full w-full\">\r\n              {discardModalOpen && <ShowDiscardDialog />}\r\n              <Excalidraw\r\n                onChange={onChange}\r\n                excalidrawAPI={excalidrawAPIRefCallback}\r\n                initialData={{\r\n                  appState: initialAppState || { isLoading: false },\r\n                  elements: initialElements,\r\n                  files: initialFiles,\r\n                }}\r\n              />\r\n              <div className=\"flex h-full items-center justify-center\">\r\n                Loading...\r\n              </div>\r\n              <div className=\"absolute bottom-0 bottom-5 right-1/2 z-10 flex translate-x-1/2 gap-2\">\r\n                <Button variant=\"outline\" onClick={onClose}>\r\n                  Discard\r\n                </Button>\r\n                <Button onClick={save}>Save</Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/editor-ui/excalidraw-modal.tsx"
    },
    {
      "path": "editor/editor-ui/excalidraw-component.tsx",
      "content": "import { useCallback, useEffect, useMemo, useRef, useState, JSX } from 'react'\r\nimport * as React from 'react'\r\n\r\nimport { AppState, BinaryFiles } from '@excalidraw/excalidraw/types/types'\r\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\r\nimport { useLexicalEditable } from '@lexical/react/useLexicalEditable'\r\nimport { useLexicalNodeSelection } from '@lexical/react/useLexicalNodeSelection'\r\nimport { mergeRegister } from '@lexical/utils'\r\nimport type { NodeKey } from 'lexical'\r\nimport {\r\n  $getNodeByKey,\r\n  CLICK_COMMAND,\r\n  COMMAND_PRIORITY_LOW,\r\n  KEY_BACKSPACE_COMMAND,\r\n  KEY_DELETE_COMMAND,\r\n} from 'lexical'\r\n\r\nimport { $isExcalidrawNode } from '@/registry/default/editor/nodes/excalidraw-node'\r\nimport ExcalidrawImage from '@/registry/default/editor/editor-ui/excalidraw-image'\r\nimport type { ExcalidrawInitialElements } from '@/registry/default/editor/editor-ui/excalidraw-modal'\r\nimport { ExcalidrawModal } from '@/registry/default/editor/editor-ui/excalidraw-modal'\r\nimport { ImageResizer } from '@/registry/default/editor/editor-ui/image-resizer'\r\n\r\nexport default function ExcalidrawComponent({\r\n  nodeKey,\r\n  data,\r\n  width,\r\n  height,\r\n}: {\r\n  data: string\r\n  nodeKey: NodeKey\r\n  width: 'inherit' | number\r\n  height: 'inherit' | number\r\n}): JSX.Element {\r\n  const [editor] = useLexicalComposerContext()\r\n  const isEditable = useLexicalEditable()\r\n  const [isModalOpen, setModalOpen] = useState<boolean>(\r\n    data === '[]' && editor.isEditable()\r\n  )\r\n  const imageContainerRef = useRef<HTMLDivElement | null>(null)\r\n  const buttonRef = useRef<HTMLButtonElement | null>(null)\r\n  const captionButtonRef = useRef<HTMLButtonElement | null>(null)\r\n  const [isSelected, setSelected, clearSelection] =\r\n    useLexicalNodeSelection(nodeKey)\r\n  const [isResizing, setIsResizing] = useState<boolean>(false)\r\n\r\n  const $onDelete = useCallback(\r\n    (event: KeyboardEvent) => {\r\n      if (isSelected) {\r\n        event.preventDefault()\r\n        editor.update(() => {\r\n          const node = $getNodeByKey(nodeKey)\r\n          if (node) {\r\n            node.remove()\r\n          }\r\n        })\r\n      }\r\n      return false\r\n    },\r\n    [editor, isSelected, nodeKey]\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (!isEditable) {\r\n      if (isSelected) {\r\n        clearSelection()\r\n      }\r\n      return\r\n    }\r\n    return mergeRegister(\r\n      editor.registerCommand(\r\n        CLICK_COMMAND,\r\n        (event: MouseEvent) => {\r\n          const buttonElem = buttonRef.current\r\n          const eventTarget = event.target\r\n\r\n          if (isResizing) {\r\n            return true\r\n          }\r\n\r\n          if (buttonElem !== null && buttonElem.contains(eventTarget as Node)) {\r\n            if (!event.shiftKey) {\r\n              clearSelection()\r\n            }\r\n            setSelected(!isSelected)\r\n            if (event.detail > 1) {\r\n              setModalOpen(true)\r\n            }\r\n            return true\r\n          }\r\n\r\n          return false\r\n        },\r\n        COMMAND_PRIORITY_LOW\r\n      ),\r\n      editor.registerCommand(\r\n        KEY_DELETE_COMMAND,\r\n        $onDelete,\r\n        COMMAND_PRIORITY_LOW\r\n      ),\r\n      editor.registerCommand(\r\n        KEY_BACKSPACE_COMMAND,\r\n        $onDelete,\r\n        COMMAND_PRIORITY_LOW\r\n      )\r\n    )\r\n  }, [\r\n    clearSelection,\r\n    editor,\r\n    isSelected,\r\n    isResizing,\r\n    $onDelete,\r\n    setSelected,\r\n    isEditable,\r\n  ])\r\n\r\n  const deleteNode = useCallback(() => {\r\n    setModalOpen(false)\r\n    return editor.update(() => {\r\n      const node = $getNodeByKey(nodeKey)\r\n      if (node) {\r\n        node.remove()\r\n      }\r\n    })\r\n  }, [editor, nodeKey])\r\n\r\n  const setData = (\r\n    els: ExcalidrawInitialElements,\r\n    aps: Partial<AppState>,\r\n    fls: BinaryFiles\r\n  ) => {\r\n    return editor.update(() => {\r\n      const node = $getNodeByKey(nodeKey)\r\n      if ($isExcalidrawNode(node)) {\r\n        if ((els && els.length > 0) || Object.keys(fls).length > 0) {\r\n          node.setData(\r\n            JSON.stringify({\r\n              appState: aps,\r\n              elements: els,\r\n              files: fls,\r\n            })\r\n          )\r\n        } else {\r\n          node.remove()\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  const onResizeStart = () => {\r\n    setIsResizing(true)\r\n  }\r\n\r\n  const onResizeEnd = (\r\n    nextWidth: 'inherit' | number,\r\n    nextHeight: 'inherit' | number\r\n  ) => {\r\n    // Delay hiding the resize bars for click case\r\n    setTimeout(() => {\r\n      setIsResizing(false)\r\n    }, 200)\r\n\r\n    editor.update(() => {\r\n      const node = $getNodeByKey(nodeKey)\r\n\r\n      if ($isExcalidrawNode(node)) {\r\n        node.setWidth(nextWidth)\r\n        node.setHeight(nextHeight)\r\n      }\r\n    })\r\n  }\r\n\r\n  const openModal = useCallback(() => {\r\n    setModalOpen(true)\r\n  }, [])\r\n\r\n  const {\r\n    elements = [],\r\n    files = {},\r\n    appState = {},\r\n  } = useMemo(() => JSON.parse(data), [data])\r\n\r\n  const closeModal = useCallback(() => {\r\n    setModalOpen(false)\r\n    if (elements.length === 0) {\r\n      editor.update(() => {\r\n        const node = $getNodeByKey(nodeKey)\r\n        if (node) {\r\n          node.remove()\r\n        }\r\n      })\r\n    }\r\n  }, [editor, nodeKey, elements.length])\r\n\r\n  return (\r\n    <>\r\n      {isEditable && isModalOpen && (\r\n        <ExcalidrawModal\r\n          initialElements={elements}\r\n          initialFiles={files}\r\n          initialAppState={appState}\r\n          isShown={isModalOpen}\r\n          onDelete={deleteNode}\r\n          onClose={closeModal}\r\n          onSave={(els, aps, fls) => {\r\n            setData(els, aps, fls)\r\n            setModalOpen(false)\r\n          }}\r\n          closeOnClickOutside={false}\r\n        />\r\n      )}\r\n      {elements.length > 0 && (\r\n        <button\r\n          ref={buttonRef}\r\n          className={`m-0 border-0 bg-transparent p-0 ${isSelected ? 'user-select-none ring-2 ring-primary ring-offset-2' : ''}`}\r\n        >\r\n          <ExcalidrawImage\r\n            imageContainerRef={imageContainerRef}\r\n            className=\"image\"\r\n            elements={elements}\r\n            files={files}\r\n            appState={appState}\r\n            width={width}\r\n            height={height}\r\n          />\r\n          {isSelected && isEditable && (\r\n            <div\r\n              className=\"image-edit-button\"\r\n              role=\"button\"\r\n              tabIndex={0}\r\n              onMouseDown={(event) => event.preventDefault()}\r\n              onClick={openModal}\r\n            />\r\n          )}\r\n          {(isSelected || isResizing) && isEditable && (\r\n            <ImageResizer\r\n              buttonRef={captionButtonRef}\r\n              showCaption={true}\r\n              setShowCaption={() => null}\r\n              imageRef={imageContainerRef}\r\n              editor={editor}\r\n              onResizeStart={onResizeStart}\r\n              onResizeEnd={onResizeEnd}\r\n              captionsEnabled={true}\r\n            />\r\n          )}\r\n        </button>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/editor-ui/excalidraw-component.tsx"
    },
    {
      "path": "editor/editor-ui/excalidraw.tsx",
      "content": "import { Excalidraw } from '@excalidraw/excalidraw'\r\n\r\nexport default Excalidraw\r\n",
      "type": "registry:component",
      "target": "components/editor/editor-ui/excalidraw.tsx"
    },
    {
      "path": "editor/plugins/toolbar/block-insert/insert-excalidraw.tsx",
      "content": "'use client'\r\n\r\nimport { FrameIcon } from 'lucide-react'\r\n\r\nimport { useToolbarContext } from '@/registry/default/editor/context/toolbar-context'\r\nimport { SelectItem } from '@/registry/default/ui/select'\r\n\r\nimport { INSERT_EXCALIDRAW_COMMAND } from '@/registry/default/editor/plugins/excalidraw-plugin'\r\n\r\nexport function InsertExcalidraw() {\r\n  const { activeEditor } = useToolbarContext()\r\n  return (\r\n    <SelectItem\r\n      value=\"excalidraw\"\r\n      onPointerUp={() =>\r\n        activeEditor.dispatchCommand(INSERT_EXCALIDRAW_COMMAND, undefined)\r\n      }\r\n      className=\"\"\r\n    >\r\n      <div className=\"flex items-center gap-1\">\r\n        <FrameIcon className=\"size-4\" />\r\n        <span>Excalidraw</span>\r\n      </div>\r\n    </SelectItem>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/block-insert/insert-excalidraw.tsx"
    }
  ]
}