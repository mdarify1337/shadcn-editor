{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "page-break-plugin",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@lexical/utils"
  ],
  "registryDependencies": [
    "select",
    "https://shadcn-editor.vercel.app/r/toolbar-plugin.json"
  ],
  "files": [
    {
      "path": "editor/plugins/page-break-plugin.tsx",
      "content": "'use client'\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nimport { useEffect, JSX } from 'react'\r\n\r\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\r\nimport { $insertNodeToNearestRoot, mergeRegister } from '@lexical/utils'\r\nimport {\r\n  $getSelection,\r\n  $isRangeSelection,\r\n  COMMAND_PRIORITY_EDITOR,\r\n  LexicalCommand,\r\n  createCommand,\r\n} from 'lexical'\r\n\r\nimport { $createPageBreakNode, PageBreakNode } from '@/registry/default/editor/nodes/page-break-node'\r\n\r\nexport const INSERT_PAGE_BREAK: LexicalCommand<undefined> = createCommand()\r\n\r\nexport function PageBreakPlugin(): JSX.Element | null {\r\n  const [editor] = useLexicalComposerContext()\r\n\r\n  useEffect(() => {\r\n    if (!editor.hasNodes([PageBreakNode])) {\r\n      throw new Error(\r\n        'PageBreakPlugin: PageBreakNode is not registered on editor'\r\n      )\r\n    }\r\n\r\n    return mergeRegister(\r\n      editor.registerCommand(\r\n        INSERT_PAGE_BREAK,\r\n        () => {\r\n          const selection = $getSelection()\r\n\r\n          if (!$isRangeSelection(selection)) {\r\n            return false\r\n          }\r\n\r\n          const focusNode = selection.focus.getNode()\r\n          if (focusNode !== null) {\r\n            const pgBreak = $createPageBreakNode()\r\n            $insertNodeToNearestRoot(pgBreak)\r\n          }\r\n\r\n          return true\r\n        },\r\n        COMMAND_PRIORITY_EDITOR\r\n      )\r\n    )\r\n  }, [editor])\r\n\r\n  return null\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/page-break-plugin.tsx"
    },
    {
      "path": "editor/nodes/page-break-node.tsx",
      "content": "import { useCallback, useEffect, JSX } from 'react'\r\n\r\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\r\nimport { useLexicalNodeSelection } from '@lexical/react/useLexicalNodeSelection'\r\nimport { mergeRegister } from '@lexical/utils'\r\nimport {\r\n  $getSelection,\r\n  $isNodeSelection,\r\n  CLICK_COMMAND,\r\n  COMMAND_PRIORITY_HIGH,\r\n  COMMAND_PRIORITY_LOW,\r\n  DOMConversionMap,\r\n  DOMConversionOutput,\r\n  DecoratorNode,\r\n  KEY_BACKSPACE_COMMAND,\r\n  KEY_DELETE_COMMAND,\r\n  LexicalNode,\r\n  NodeKey,\r\n  SerializedLexicalNode,\r\n} from 'lexical'\r\n\r\nexport type SerializedPageBreakNode = SerializedLexicalNode\r\n\r\nfunction PageBreakComponent({ nodeKey }: { nodeKey: NodeKey }) {\r\n  const [editor] = useLexicalComposerContext()\r\n  const [isSelected, setSelected, clearSelection] =\r\n    useLexicalNodeSelection(nodeKey)\r\n\r\n  const $onDelete = useCallback(\r\n    (event: KeyboardEvent) => {\r\n      event.preventDefault()\r\n      const deleteSelection = $getSelection()\r\n      if (isSelected && $isNodeSelection(deleteSelection)) {\r\n        editor.update(() => {\r\n          deleteSelection.getNodes().forEach((node) => {\r\n            if ($isPageBreakNode(node)) {\r\n              node.remove()\r\n            }\r\n          })\r\n        })\r\n      }\r\n      return false\r\n    },\r\n    [editor, isSelected]\r\n  )\r\n\r\n  useEffect(() => {\r\n    return mergeRegister(\r\n      editor.registerCommand(\r\n        CLICK_COMMAND,\r\n        (event: MouseEvent) => {\r\n          const pbElem = editor.getElementByKey(nodeKey)\r\n\r\n          if (event.target === pbElem) {\r\n            if (!event.shiftKey) {\r\n              clearSelection()\r\n            }\r\n            setSelected(!isSelected)\r\n            return true\r\n          }\r\n\r\n          return false\r\n        },\r\n        COMMAND_PRIORITY_LOW\r\n      ),\r\n      editor.registerCommand(\r\n        KEY_DELETE_COMMAND,\r\n        $onDelete,\r\n        COMMAND_PRIORITY_LOW\r\n      ),\r\n      editor.registerCommand(\r\n        KEY_BACKSPACE_COMMAND,\r\n        $onDelete,\r\n        COMMAND_PRIORITY_LOW\r\n      )\r\n    )\r\n  }, [clearSelection, editor, isSelected, nodeKey, $onDelete, setSelected])\r\n\r\n  useEffect(() => {\r\n    const pbElem = editor.getElementByKey(nodeKey)\r\n    if (pbElem !== null) {\r\n      if (isSelected) {\r\n        pbElem.classList.add('!border-[var(--editor-color-primary,#4766cb)]')\r\n        pbElem.classList.add(\r\n          '!after:text-[var(--editor-color-primary,#4766cb)]'\r\n        )\r\n        pbElem.classList.add('!before:opacity-100')\r\n      } else {\r\n        pbElem.classList.remove('!border-[var(--editor-color-primary,#4766cb)]')\r\n        pbElem.classList.remove(\r\n          '!after:text-[var(--editor-color-primary,#4766cb)]'\r\n        )\r\n        pbElem.classList.remove('!before:opacity-100')\r\n      }\r\n    }\r\n  }, [editor, isSelected, nodeKey])\r\n\r\n  return null\r\n}\r\n\r\nexport class PageBreakNode extends DecoratorNode<JSX.Element> {\r\n  static getType(): string {\r\n    return 'page-break'\r\n  }\r\n\r\n  static clone(node: PageBreakNode): PageBreakNode {\r\n    return new PageBreakNode(node.__key)\r\n  }\r\n\r\n  static importJSON(serializedNode: SerializedPageBreakNode): PageBreakNode {\r\n    return $createPageBreakNode()\r\n  }\r\n\r\n  static importDOM(): DOMConversionMap | null {\r\n    return {\r\n      figure: (domNode: HTMLElement) => {\r\n        const tp = domNode.getAttribute('type')\r\n        if (tp !== this.getType()) {\r\n          return null\r\n        }\r\n\r\n        return {\r\n          conversion: $convertPageBreakElement,\r\n          priority: COMMAND_PRIORITY_HIGH,\r\n        }\r\n      },\r\n    }\r\n  }\r\n\r\n  exportJSON(): SerializedLexicalNode {\r\n    return {\r\n      type: this.getType(),\r\n      version: 1,\r\n    }\r\n  }\r\n\r\n  createDOM(): HTMLElement {\r\n    const el = document.createElement('figure')\r\n    el.setAttribute('type', this.getType())\r\n    el.style.pageBreakAfter = 'always'\r\n    el.className = `\r\n      relative block w-[calc(100%+56px)] overflow-visible \r\n      -ml-[28px] mt-7 mb-7\r\n      border-0 border-t border-b border-dashed border-[var(--editor-color-secondary,#eee)]\r\n      bg-[var(--editor-color-secondary,#eee)]\r\n      before:content-[''] \r\n      before:absolute before:top-1/2 before:-translate-y-1/2\r\n      before:left-10 before:opacity-50\r\n      before:bg-cover before:w-4 before:h-4\r\n      after:content-['PAGE_BREAK']\r\n      after:absolute after:top-1/2 after:left-1/2 \r\n      after:-translate-x-1/2 after:-translate-y-1/2\r\n      after:block after:py-0.5 after:px-1.5\r\n      after:border after:border-solid after:border-[#ccc]\r\n      after:bg-white after:text-xs after:text-black after:font-semibold\r\n    `\r\n    return el\r\n  }\r\n\r\n  getTextContent(): string {\r\n    return '\\n'\r\n  }\r\n\r\n  isInline(): false {\r\n    return false\r\n  }\r\n\r\n  updateDOM(): boolean {\r\n    return false\r\n  }\r\n\r\n  decorate(): JSX.Element {\r\n    return <PageBreakComponent nodeKey={this.__key} />\r\n  }\r\n}\r\n\r\nfunction $convertPageBreakElement(): DOMConversionOutput {\r\n  return { node: $createPageBreakNode() }\r\n}\r\n\r\nexport function $createPageBreakNode(): PageBreakNode {\r\n  return new PageBreakNode()\r\n}\r\n\r\nexport function $isPageBreakNode(\r\n  node: LexicalNode | null | undefined\r\n): node is PageBreakNode {\r\n  return node instanceof PageBreakNode\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/nodes/page-break-node.tsx"
    },
    {
      "path": "editor/plugins/toolbar/block-insert/insert-page-break.tsx",
      "content": "'use client'\r\n\r\nimport { SquareSplitVerticalIcon } from 'lucide-react'\r\n\r\nimport { useToolbarContext } from '@/registry/default/editor/context/toolbar-context'\r\nimport { SelectItem } from '@/registry/default/ui/select'\r\n\r\nimport { INSERT_PAGE_BREAK } from '@/registry/default/editor/plugins/page-break-plugin'\r\n\r\nexport function InsertPageBreak() {\r\n  const { activeEditor } = useToolbarContext()\r\n\r\n  return (\r\n    <SelectItem\r\n      value=\"page-break\"\r\n      onPointerUp={() =>\r\n        activeEditor.dispatchCommand(INSERT_PAGE_BREAK, undefined)\r\n      }\r\n      className=\"\"\r\n    >\r\n      <div className=\"flex items-center gap-1\">\r\n        <SquareSplitVerticalIcon className=\"size-4\" />\r\n        <span>Page Break</span>\r\n      </div>\r\n    </SelectItem>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/block-insert/insert-page-break.tsx"
    }
  ]
}