{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "context-menu-plugin",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@lexical/link"
  ],
  "registryDependencies": [
    "command",
    "popover",
    "https://shadcn-editor.vercel.app/r/rich-text-editor-plugin.json"
  ],
  "files": [
    {
      "path": "editor/plugins/context-menu-plugin.tsx",
      "content": "'use client'\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nimport { useCallback, useMemo, JSX } from 'react'\r\nimport * as React from 'react'\r\n\r\nimport dynamic from 'next/dynamic'\r\n\r\nimport { $isLinkNode, TOGGLE_LINK_COMMAND } from '@lexical/link'\r\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\r\nimport { MenuOption } from '@lexical/react/LexicalContextMenuPlugin'\r\nimport { PopoverPortal } from '@radix-ui/react-popover'\r\nimport {\r\n  $getNearestNodeFromDOMNode,\r\n  $getSelection,\r\n  $isRangeSelection,\r\n  COPY_COMMAND,\r\n  CUT_COMMAND,\r\n  type LexicalNode,\r\n  PASTE_COMMAND,\r\n} from 'lexical'\r\n\r\nimport { Command, CommandItem, CommandList } from '@/registry/default/ui/command'\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from '@/registry/default/ui/popover'\r\n\r\nconst LexicalContextMenuPlugin = dynamic(\r\n  () => import('./default/lexical-context-menu-plugin'),\r\n  { ssr: false }\r\n)\r\n\r\nexport class ContextMenuOption extends MenuOption {\r\n  title: string\r\n  onSelect: (targetNode: LexicalNode | null) => void\r\n  constructor(\r\n    title: string,\r\n    options: {\r\n      onSelect: (targetNode: LexicalNode | null) => void\r\n    }\r\n  ) {\r\n    super(title)\r\n    this.title = title\r\n    this.onSelect = options.onSelect.bind(this)\r\n  }\r\n}\r\n\r\nexport function ContextMenuPlugin(): JSX.Element {\r\n  const [editor] = useLexicalComposerContext()\r\n  const [isOpen, setIsOpen] = React.useState(false)\r\n\r\n  const defaultOptions = useMemo(() => {\r\n    return [\r\n      new ContextMenuOption(`Copy`, {\r\n        onSelect: (_node) => {\r\n          editor.dispatchCommand(COPY_COMMAND, null)\r\n        },\r\n      }),\r\n      new ContextMenuOption(`Cut`, {\r\n        onSelect: (_node) => {\r\n          editor.dispatchCommand(CUT_COMMAND, null)\r\n        },\r\n      }),\r\n      new ContextMenuOption(`Paste`, {\r\n        onSelect: (_node) => {\r\n          navigator.clipboard.read().then(async function (...args) {\r\n            const data = new DataTransfer()\r\n\r\n            const items = await navigator.clipboard.read()\r\n            const item = items[0]\r\n\r\n            const permission = await navigator.permissions.query({\r\n              // @ts-expect-error These types are incorrect.\r\n              name: 'clipboard-read',\r\n            })\r\n            if (permission.state === 'denied') {\r\n              alert('Not allowed to paste from clipboard.')\r\n              return\r\n            }\r\n\r\n            for (const type of item.types) {\r\n              const dataString = await (await item.getType(type)).text()\r\n              data.setData(type, dataString)\r\n            }\r\n\r\n            const event = new ClipboardEvent('paste', {\r\n              clipboardData: data,\r\n            })\r\n\r\n            editor.dispatchCommand(PASTE_COMMAND, event)\r\n          })\r\n        },\r\n      }),\r\n      new ContextMenuOption(`Paste as Plain Text`, {\r\n        onSelect: (_node) => {\r\n          navigator.clipboard.read().then(async function (...args) {\r\n            const permission = await navigator.permissions.query({\r\n              // @ts-expect-error These types are incorrect.\r\n              name: 'clipboard-read',\r\n            })\r\n\r\n            if (permission.state === 'denied') {\r\n              alert('Not allowed to paste from clipboard.')\r\n              return\r\n            }\r\n\r\n            const data = new DataTransfer()\r\n            const items = await navigator.clipboard.readText()\r\n            data.setData('text/plain', items)\r\n\r\n            const event = new ClipboardEvent('paste', {\r\n              clipboardData: data,\r\n            })\r\n            editor.dispatchCommand(PASTE_COMMAND, event)\r\n          })\r\n        },\r\n      }),\r\n      new ContextMenuOption(`Delete Node`, {\r\n        onSelect: (_node) => {\r\n          const selection = $getSelection()\r\n          if ($isRangeSelection(selection)) {\r\n            const currentNode = selection.anchor.getNode()\r\n            const ancestorNodeWithRootAsParent = currentNode.getParents().at(-2)\r\n\r\n            ancestorNodeWithRootAsParent?.remove()\r\n          }\r\n        },\r\n      }),\r\n    ]\r\n  }, [editor])\r\n\r\n  const [options, setOptions] = React.useState(defaultOptions)\r\n\r\n  const onSelectOption = useCallback(\r\n    (\r\n      selectedOption: ContextMenuOption,\r\n      targetNode: LexicalNode | null,\r\n      closeMenu: () => void\r\n    ) => {\r\n      editor.update(() => {\r\n        selectedOption.onSelect(targetNode)\r\n        closeMenu()\r\n      })\r\n    },\r\n    [editor]\r\n  )\r\n\r\n  const onWillOpen = (event: MouseEvent) => {\r\n    let newOptions = defaultOptions\r\n    setIsOpen(true)\r\n    editor.update(() => {\r\n      const node = $getNearestNodeFromDOMNode(event.target as Element)\r\n      if (node) {\r\n        const parent = node.getParent()\r\n        if ($isLinkNode(parent)) {\r\n          newOptions = [\r\n            new ContextMenuOption(`Remove Link`, {\r\n              onSelect: (_node) => {\r\n                editor.dispatchCommand(TOGGLE_LINK_COMMAND, null)\r\n              },\r\n            }),\r\n            ...defaultOptions,\r\n          ]\r\n        }\r\n      }\r\n    })\r\n    setOptions(newOptions)\r\n  }\r\n\r\n  return (\r\n    <LexicalContextMenuPlugin\r\n      options={options}\r\n      onSelectOption={(option, targetNode) => {\r\n        onSelectOption(option as ContextMenuOption, targetNode, () => {\r\n          setIsOpen(false)\r\n        })\r\n      }}\r\n      onWillOpen={onWillOpen}\r\n      onOpen={() => {\r\n        setIsOpen(true)\r\n      }}\r\n      onClose={() => {\r\n        setIsOpen(false)\r\n      }}\r\n      menuRenderFn={(\r\n        anchorElementRef,\r\n        { options: _options, selectOptionAndCleanUp },\r\n        { setMenuRef }\r\n      ) => {\r\n        return anchorElementRef.current ? (\r\n          <Popover open={isOpen} onOpenChange={setIsOpen}>\r\n            <PopoverPortal container={anchorElementRef.current}>\r\n              <div>\r\n                <PopoverTrigger\r\n                  ref={setMenuRef}\r\n                  style={{\r\n                    marginLeft: anchorElementRef.current?.style.width,\r\n                    userSelect: 'none',\r\n                  }}\r\n                />\r\n                <PopoverContent className=\"w-[200px] p-1\">\r\n                  <Command>\r\n                    <CommandList>\r\n                      {options.map((option) => (\r\n                        <CommandItem\r\n                          key={option.key}\r\n                          onSelect={() => {\r\n                            selectOptionAndCleanUp(option)\r\n                          }}\r\n                        >\r\n                          {option.title}\r\n                        </CommandItem>\r\n                      ))}\r\n                    </CommandList>\r\n                  </Command>\r\n                </PopoverContent>\r\n              </div>\r\n            </PopoverPortal>\r\n          </Popover>\r\n        ) : null\r\n      }}\r\n    />\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/context-menu-plugin.tsx"
    },
    {
      "path": "editor/plugins/default/lexical-context-menu-plugin.tsx",
      "content": "import { LexicalContextMenuPlugin } from '@lexical/react/LexicalContextMenuPlugin'\r\n\r\nexport default LexicalContextMenuPlugin\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/default/lexical-context-menu-plugin.tsx"
    }
  ]
}