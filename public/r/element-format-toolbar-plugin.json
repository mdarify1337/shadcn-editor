{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "element-format-toolbar-plugin",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@lexical/link",
    "@lexical/utils",
    "@lexical/selection"
  ],
  "registryDependencies": [
    "separator",
    "toggle-group",
    "https://shadcn-editor.vercel.app/r/toolbar-plugin.json"
  ],
  "files": [
    {
      "path": "editor/plugins/toolbar/element-format-toolbar-plugin.tsx",
      "content": "'use client'\r\n\r\nimport { useState } from 'react'\r\n\r\nimport { $isLinkNode } from '@lexical/link'\r\nimport { $findMatchingParent } from '@lexical/utils'\r\nimport {\r\n  $isElementNode,\r\n  $isRangeSelection,\r\n  BaseSelection,\r\n  ElementFormatType,\r\n  FORMAT_ELEMENT_COMMAND,\r\n  INDENT_CONTENT_COMMAND,\r\n  OUTDENT_CONTENT_COMMAND,\r\n} from 'lexical'\r\nimport { IndentIncreaseIcon } from 'lucide-react'\r\nimport { IndentDecreaseIcon } from 'lucide-react'\r\nimport { AlignLeftIcon } from 'lucide-react'\r\nimport { AlignJustifyIcon } from 'lucide-react'\r\nimport { AlignCenterIcon, AlignRightIcon } from 'lucide-react'\r\n\r\nimport { Separator } from '@/registry/default/ui/separator'\r\nimport { ToggleGroup, ToggleGroupItem } from '@/registry/default/ui/toggle-group'\r\n\r\nimport { useToolbarContext } from '@/registry/default/editor/context/toolbar-context'\r\nimport { useUpdateToolbarHandler } from '@/registry/default/editor/editor-hooks/use-update-toolbar'\r\nimport { getSelectedNode } from '@/registry/default/editor/utils/get-selected-node'\r\n\r\nconst ELEMENT_FORMAT_OPTIONS: {\r\n  [key in Exclude<ElementFormatType, 'start' | 'end' | ''>]: {\r\n    icon: React.ReactNode\r\n    iconRTL: string\r\n    name: string\r\n  }\r\n} = {\r\n  left: {\r\n    icon: <AlignLeftIcon className=\"size-4\" />,\r\n    iconRTL: 'left-align',\r\n    name: 'Left Align',\r\n  },\r\n  center: {\r\n    icon: <AlignCenterIcon className=\"size-4\" />,\r\n    iconRTL: 'center-align',\r\n    name: 'Center Align',\r\n  },\r\n  right: {\r\n    icon: <AlignRightIcon className=\"size-4\" />,\r\n    iconRTL: 'right-align',\r\n    name: 'Right Align',\r\n  },\r\n  justify: {\r\n    icon: <AlignJustifyIcon className=\"size-4\" />,\r\n    iconRTL: 'justify-align',\r\n    name: 'Justify Align',\r\n  },\r\n} as const\r\n\r\nexport function ElementFormatToolbarPlugin() {\r\n  const { activeEditor } = useToolbarContext()\r\n  const [elementFormat, setElementFormat] = useState<ElementFormatType>('left')\r\n\r\n  const $updateToolbar = (selection: BaseSelection) => {\r\n    if ($isRangeSelection(selection)) {\r\n      const node = getSelectedNode(selection)\r\n      const parent = node.getParent()\r\n\r\n      let matchingParent\r\n      if ($isLinkNode(parent)) {\r\n        // If node is a link, we need to fetch the parent paragraph node to set format\r\n        matchingParent = $findMatchingParent(\r\n          node,\r\n          (parentNode) => $isElementNode(parentNode) && !parentNode.isInline()\r\n        )\r\n      }\r\n      setElementFormat(\r\n        $isElementNode(matchingParent)\r\n          ? matchingParent.getFormatType()\r\n          : $isElementNode(node)\r\n            ? node.getFormatType()\r\n            : parent?.getFormatType() || 'left'\r\n      )\r\n    }\r\n  }\r\n\r\n  useUpdateToolbarHandler($updateToolbar)\r\n\r\n  const handleValueChange = (value: string) => {\r\n    if (!value) return // Prevent unselecting current value\r\n\r\n    setElementFormat(value as ElementFormatType)\r\n\r\n    if (value === 'indent') {\r\n      activeEditor.dispatchCommand(INDENT_CONTENT_COMMAND, undefined)\r\n    } else if (value === 'outdent') {\r\n      activeEditor.dispatchCommand(OUTDENT_CONTENT_COMMAND, undefined)\r\n    } else {\r\n      activeEditor.dispatchCommand(\r\n        FORMAT_ELEMENT_COMMAND,\r\n        value as ElementFormatType\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ToggleGroup\r\n      type=\"single\"\r\n      value={elementFormat}\r\n      defaultValue={elementFormat}\r\n      onValueChange={handleValueChange}\r\n      className=\"flex gap-1\"\r\n    >\r\n      {/* Alignment toggles */}\r\n      {Object.entries(ELEMENT_FORMAT_OPTIONS).map(([value, option]) => (\r\n        <ToggleGroupItem\r\n          key={value}\r\n          value={value}\r\n          variant={'outline'}\r\n          aria-label={option.name}\r\n          size=\"sm\"\r\n          className=\"h-8 w-8 p-0\"\r\n        >\r\n          {option.icon}\r\n        </ToggleGroupItem>\r\n      ))}\r\n\r\n      <Separator orientation=\"vertical\" className=\"h-8\" />\r\n      {/* Indentation toggles */}\r\n      <ToggleGroupItem\r\n        value=\"outdent\"\r\n        aria-label=\"Outdent\"\r\n        variant={'outline'}\r\n        size=\"sm\"\r\n        className=\"h-8 w-8\"\r\n      >\r\n        <IndentDecreaseIcon className=\"size-4\" />\r\n      </ToggleGroupItem>\r\n\r\n      <ToggleGroupItem\r\n        value=\"indent\"\r\n        variant={'outline'}\r\n        aria-label=\"Indent\"\r\n        size=\"sm\"\r\n        className=\"h-8 w-8\"\r\n      >\r\n        <IndentIncreaseIcon className=\"size-4\" />\r\n      </ToggleGroupItem>\r\n    </ToggleGroup>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/element-format-toolbar-plugin.tsx"
    },
    {
      "path": "editor/utils/get-selected-node.ts",
      "content": "import { $isAtNodeEnd } from '@lexical/selection'\r\nimport { ElementNode, RangeSelection, TextNode } from 'lexical'\r\n\r\nexport function getSelectedNode(\r\n  selection: RangeSelection\r\n): TextNode | ElementNode {\r\n  const anchor = selection.anchor\r\n  const focus = selection.focus\r\n  const anchorNode = selection.anchor.getNode()\r\n  const focusNode = selection.focus.getNode()\r\n  if (anchorNode === focusNode) {\r\n    return anchorNode\r\n  }\r\n  const isBackward = selection.isBackward()\r\n  if (isBackward) {\r\n    return $isAtNodeEnd(focus) ? anchorNode : focusNode\r\n  } else {\r\n    return $isAtNodeEnd(anchor) ? anchorNode : focusNode\r\n  }\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/utils/get-selected-node.ts"
    },
    {
      "path": "editor/editor-hooks/use-update-toolbar.ts",
      "content": "import { useEffect } from 'react'\r\n\r\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\r\nimport {\r\n  $getSelection,\r\n  BaseSelection,\r\n  COMMAND_PRIORITY_CRITICAL,\r\n} from 'lexical'\r\nimport { SELECTION_CHANGE_COMMAND } from 'lexical'\r\n\r\nimport { useToolbarContext } from '@/registry/default/editor/context/toolbar-context'\r\n\r\nexport function useUpdateToolbarHandler(\r\n  callback: (selection: BaseSelection) => void\r\n) {\r\n  const [editor] = useLexicalComposerContext()\r\n  const { activeEditor } = useToolbarContext()\r\n\r\n  useEffect(() => {\r\n    return activeEditor.registerCommand(\r\n      SELECTION_CHANGE_COMMAND,\r\n      () => {\r\n        const selection = $getSelection()\r\n        if (selection) {\r\n          callback(selection)\r\n        }\r\n        return false\r\n      },\r\n      COMMAND_PRIORITY_CRITICAL\r\n    )\r\n  }, [editor, callback])\r\n\r\n  useEffect(() => {\r\n    activeEditor.getEditorState().read(() => {\r\n      const selection = $getSelection()\r\n      if (selection) {\r\n        callback(selection)\r\n      }\r\n    })\r\n  }, [activeEditor, callback])\r\n}\r\n",
      "type": "registry:hook",
      "target": "components/editor/editor-hooks/use-update-toolbar.ts"
    }
  ]
}