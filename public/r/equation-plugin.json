{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "equation-plugin",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "files": [
    {
      "path": "editor/plugins/equations-plugin.tsx",
      "content": "'use client'\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nimport { useCallback, useEffect, JSX } from 'react'\r\nimport * as React from 'react'\r\n\r\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\r\nimport { $wrapNodeInElement } from '@lexical/utils'\r\nimport 'katex/dist/katex.css'\r\nimport {\r\n  $createParagraphNode,\r\n  $insertNodes,\r\n  $isRootOrShadowRoot,\r\n  COMMAND_PRIORITY_EDITOR,\r\n  LexicalCommand,\r\n  LexicalEditor,\r\n  createCommand,\r\n} from 'lexical'\r\n\r\nimport { $createEquationNode, EquationNode } from '@/registry/default/editor/nodes/equation-node'\r\nimport KatexEquationAlterer from '@/registry/default/editor/editor-ui/katex-equation-alterer'\r\n\r\ntype CommandPayload = {\r\n  equation: string\r\n  inline: boolean\r\n}\r\n\r\nexport const INSERT_EQUATION_COMMAND: LexicalCommand<CommandPayload> =\r\n  createCommand('INSERT_EQUATION_COMMAND')\r\n\r\nexport function InsertEquationDialog({\r\n  activeEditor,\r\n  onClose,\r\n}: {\r\n  activeEditor: LexicalEditor\r\n  onClose: () => void\r\n}): JSX.Element {\r\n  const onEquationConfirm = useCallback(\r\n    (equation: string, inline: boolean) => {\r\n      activeEditor.dispatchCommand(INSERT_EQUATION_COMMAND, {\r\n        equation,\r\n        inline,\r\n      })\r\n      onClose()\r\n    },\r\n    [activeEditor, onClose]\r\n  )\r\n\r\n  return <KatexEquationAlterer onConfirm={onEquationConfirm} />\r\n}\r\n\r\nexport function EquationsPlugin(): JSX.Element | null {\r\n  const [editor] = useLexicalComposerContext()\r\n\r\n  useEffect(() => {\r\n    if (!editor.hasNodes([EquationNode])) {\r\n      throw new Error(\r\n        'EquationsPlugins: EquationsNode not registered on editor'\r\n      )\r\n    }\r\n\r\n    return editor.registerCommand<CommandPayload>(\r\n      INSERT_EQUATION_COMMAND,\r\n      (payload) => {\r\n        const { equation, inline } = payload\r\n        const equationNode = $createEquationNode(equation, inline)\r\n\r\n        $insertNodes([equationNode])\r\n        if ($isRootOrShadowRoot(equationNode.getParentOrThrow())) {\r\n          $wrapNodeInElement(equationNode, $createParagraphNode).selectEnd()\r\n        }\r\n\r\n        return true\r\n      },\r\n      COMMAND_PRIORITY_EDITOR\r\n    )\r\n  }, [editor])\r\n\r\n  return null\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/equations-plugin.tsx"
    }
  ]
}