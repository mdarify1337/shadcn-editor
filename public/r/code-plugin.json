{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "code-plugin",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "lodash-es",
    "@lexical/utils",
    "@lexical/code",
    "@lexical/selection"
  ],
  "registryDependencies": [
    "select",
    "https://shadcn-editor.vercel.app/r/toolbar-plugin.json"
  ],
  "files": [
    {
      "path": "editor/plugins/code-action-menu-plugin.tsx",
      "content": "'use client'\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\n// import './index.css';\r\nimport { useEffect, useRef, useState, JSX } from 'react'\r\nimport * as React from 'react'\r\n\r\nimport {\r\n  $isCodeNode,\r\n  CodeNode,\r\n  getLanguageFriendlyName,\r\n  normalizeCodeLang,\r\n} from '@lexical/code'\r\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\r\nimport { $getNearestNodeFromDOMNode } from 'lexical'\r\nimport { createPortal } from 'react-dom'\r\n\r\nimport { useDebounce } from '@/registry/default/editor/editor-hooks/use-debounce'\r\nimport { CopyButton } from '@/registry/default/editor/editor-ui/code-button'\r\n\r\nconst CODE_PADDING = 8\r\n\r\ninterface Position {\r\n  top: string\r\n  right: string\r\n}\r\n\r\nfunction CodeActionMenuContainer({\r\n  anchorElem,\r\n}: {\r\n  anchorElem: HTMLElement\r\n}): JSX.Element {\r\n  const [editor] = useLexicalComposerContext()\r\n\r\n  const [lang, setLang] = useState('')\r\n  const [isShown, setShown] = useState<boolean>(false)\r\n  const [shouldListenMouseMove, setShouldListenMouseMove] =\r\n    useState<boolean>(false)\r\n  const [position, setPosition] = useState<Position>({\r\n    right: '0',\r\n    top: '0',\r\n  })\r\n  const codeSetRef = useRef<Set<string>>(new Set())\r\n  const codeDOMNodeRef = useRef<HTMLElement | null>(null)\r\n\r\n  function getCodeDOMNode(): HTMLElement | null {\r\n    return codeDOMNodeRef.current\r\n  }\r\n\r\n  const debouncedOnMouseMove = useDebounce(\r\n    (event: MouseEvent) => {\r\n      const { codeDOMNode, isOutside } = getMouseInfo(event)\r\n      if (isOutside) {\r\n        setShown(false)\r\n        return\r\n      }\r\n\r\n      if (!codeDOMNode) {\r\n        return\r\n      }\r\n\r\n      codeDOMNodeRef.current = codeDOMNode\r\n\r\n      let codeNode: CodeNode | null = null\r\n      let _lang = ''\r\n\r\n      editor.update(() => {\r\n        const maybeCodeNode = $getNearestNodeFromDOMNode(codeDOMNode)\r\n\r\n        if ($isCodeNode(maybeCodeNode)) {\r\n          codeNode = maybeCodeNode\r\n          _lang = codeNode.getLanguage() || ''\r\n        }\r\n      })\r\n\r\n      if (codeNode) {\r\n        const { y: editorElemY, right: editorElemRight } =\r\n          anchorElem.getBoundingClientRect()\r\n        const { y, right } = codeDOMNode.getBoundingClientRect()\r\n        setLang(_lang)\r\n        setShown(true)\r\n        setPosition({\r\n          right: `${editorElemRight - right + CODE_PADDING}px`,\r\n          top: `${y - editorElemY}px`,\r\n        })\r\n      }\r\n    },\r\n    50,\r\n    1000\r\n  )\r\n\r\n  useEffect(() => {\r\n    if (!shouldListenMouseMove) {\r\n      return\r\n    }\r\n\r\n    document.addEventListener('mousemove', debouncedOnMouseMove)\r\n\r\n    return () => {\r\n      setShown(false)\r\n      debouncedOnMouseMove.cancel()\r\n      document.removeEventListener('mousemove', debouncedOnMouseMove)\r\n    }\r\n  }, [shouldListenMouseMove, debouncedOnMouseMove])\r\n\r\n  useEffect(() => {\r\n    return editor.registerMutationListener(\r\n      CodeNode,\r\n      (mutations) => {\r\n        editor.getEditorState().read(() => {\r\n          for (const [key, type] of Array.from(mutations)) {\r\n            switch (type) {\r\n              case 'created':\r\n                codeSetRef.current.add(key)\r\n                break\r\n\r\n              case 'destroyed':\r\n                codeSetRef.current.delete(key)\r\n                break\r\n\r\n              default:\r\n                break\r\n            }\r\n          }\r\n        })\r\n        setShouldListenMouseMove(codeSetRef.current.size > 0)\r\n      },\r\n      { skipInitialization: false }\r\n    )\r\n  }, [editor])\r\n\r\n  const normalizedLang = normalizeCodeLang(lang)\r\n  const codeFriendlyName = getLanguageFriendlyName(lang)\r\n\r\n  return (\r\n    <>\r\n      {isShown ? (\r\n        <div\r\n          className=\"code-action-menu-container user-select-none absolute flex h-9 flex-row items-center space-x-1 text-xs text-foreground/50\"\r\n          style={{ ...position }}\r\n        >\r\n          <div>{codeFriendlyName}</div>\r\n          <CopyButton editor={editor} getCodeDOMNode={getCodeDOMNode} />\r\n        </div>\r\n      ) : null}\r\n    </>\r\n  )\r\n}\r\n\r\nfunction getMouseInfo(event: MouseEvent): {\r\n  codeDOMNode: HTMLElement | null\r\n  isOutside: boolean\r\n} {\r\n  const target = event.target\r\n\r\n  if (target && target instanceof HTMLElement) {\r\n    const codeDOMNode = target.closest<HTMLElement>('code.EditorTheme__code')\r\n    const isOutside = !(\r\n      codeDOMNode ||\r\n      target.closest<HTMLElement>('div.code-action-menu-container')\r\n    )\r\n\r\n    return { codeDOMNode, isOutside }\r\n  } else {\r\n    return { codeDOMNode: null, isOutside: true }\r\n  }\r\n}\r\n\r\nexport function CodeActionMenuPlugin({\r\n  anchorElem,\r\n}: {\r\n  anchorElem: HTMLDivElement | null\r\n}): React.ReactPortal | null {\r\n  if (!anchorElem) {\r\n    return null\r\n  }\r\n\r\n  return createPortal(\r\n    <CodeActionMenuContainer anchorElem={anchorElem} />,\r\n    anchorElem\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/code-action-menu-plugin.tsx"
    },
    {
      "path": "editor/plugins/code-highlight-plugin.tsx",
      "content": "'use client'\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nimport { useEffect, JSX } from 'react'\r\n\r\nimport { registerCodeHighlighting } from '@lexical/code'\r\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\r\n\r\n\r\nexport function CodeHighlightPlugin(): JSX.Element | null {\r\n  const [editor] = useLexicalComposerContext()\r\n\r\n  useEffect(() => {\r\n    return registerCodeHighlighting(editor)\r\n  }, [editor])\r\n\r\n  return null\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/code-highlight-plugin.tsx"
    },
    {
      "path": "editor/editor-hooks/use-debounce.ts",
      "content": "import { useMemo, useRef } from 'react'\r\n\r\nimport { debounce } from 'lodash-es'\r\n\r\nexport function useDebounce<T extends (...args: never[]) => void>(\r\n  fn: T,\r\n  ms: number,\r\n  maxWait?: number\r\n) {\r\n  const funcRef = useRef<T | null>(null)\r\n  funcRef.current = fn\r\n\r\n  return useMemo(\r\n    () =>\r\n      debounce(\r\n        (...args: Parameters<T>) => {\r\n          if (funcRef.current) {\r\n            funcRef.current(...args)\r\n          }\r\n        },\r\n        ms,\r\n        { maxWait }\r\n      ),\r\n    [ms, maxWait]\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/editor-hooks/use-debounce.ts"
    },
    {
      "path": "editor/editor-ui/code-button.tsx",
      "content": "import * as React from 'react'\r\nimport { useState } from 'react'\r\n\r\nimport { $isCodeNode } from '@lexical/code'\r\nimport {\r\n  $getNearestNodeFromDOMNode,\r\n  $getSelection,\r\n  $setSelection,\r\n  LexicalEditor,\r\n} from 'lexical'\r\nimport { CircleCheckIcon, CopyIcon } from 'lucide-react'\r\n\r\nimport { useDebounce } from '@/registry/default/editor/editor-hooks/use-debounce'\r\n\r\ninterface Props {\r\n  editor: LexicalEditor\r\n  getCodeDOMNode: () => HTMLElement | null\r\n}\r\n\r\nexport function CopyButton({ editor, getCodeDOMNode }: Props) {\r\n  const [isCopyCompleted, setCopyCompleted] = useState<boolean>(false)\r\n\r\n  const removeSuccessIcon = useDebounce(() => {\r\n    setCopyCompleted(false)\r\n  }, 1000)\r\n\r\n  async function handleClick(): Promise<void> {\r\n    const codeDOMNode = getCodeDOMNode()\r\n\r\n    if (!codeDOMNode) {\r\n      return\r\n    }\r\n\r\n    let content = ''\r\n\r\n    editor.update(() => {\r\n      const codeNode = $getNearestNodeFromDOMNode(codeDOMNode)\r\n\r\n      if ($isCodeNode(codeNode)) {\r\n        content = codeNode.getTextContent()\r\n      }\r\n\r\n      const selection = $getSelection()\r\n      $setSelection(selection)\r\n    })\r\n\r\n    try {\r\n      await navigator.clipboard.writeText(content)\r\n      setCopyCompleted(true)\r\n      removeSuccessIcon()\r\n    } catch (err) {\r\n      console.error('Failed to copy: ', err)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <button\r\n      className=\"flex shrink-0 cursor-pointer items-center rounded border border-transparent bg-none p-1 uppercase text-foreground/50\"\r\n      onClick={handleClick}\r\n      aria-label=\"copy\"\r\n    >\r\n      {isCopyCompleted ? (\r\n        <CircleCheckIcon className=\"size-4\" />\r\n      ) : (\r\n        <CopyIcon className=\"size-4\" />\r\n      )}\r\n    </button>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/editor-ui/code-button.tsx"
    },
    {
      "path": "editor/plugins/toolbar/block-format/format-code-block.tsx",
      "content": "import { $createCodeNode } from '@lexical/code'\r\nimport { $setBlocksType } from '@lexical/selection'\r\nimport { $getSelection, $isRangeSelection } from 'lexical'\r\n\r\nimport { useToolbarContext } from '@/registry/default/editor/context/toolbar-context'\r\nimport { SelectItem } from '@/registry/default/ui/select'\r\n\r\nimport { blockTypeToBlockName } from '@/registry/default/editor/plugins/toolbar/block-format/block-format-data'\r\n\r\nconst BLOCK_FORMAT_VALUE = 'code'\r\n\r\nexport function FormatCodeBlock() {\r\n  const { activeEditor, blockType } = useToolbarContext()\r\n\r\n  const formatCode = () => {\r\n    if (blockType !== 'code') {\r\n      activeEditor.update(() => {\r\n        let selection = $getSelection()\r\n\r\n        if (selection !== null) {\r\n          if (selection.isCollapsed()) {\r\n            $setBlocksType(selection, () => $createCodeNode())\r\n          } else {\r\n            const textContent = selection.getTextContent()\r\n            const codeNode = $createCodeNode()\r\n            selection.insertNodes([codeNode])\r\n            selection = $getSelection()\r\n            if ($isRangeSelection(selection)) {\r\n              selection.insertRawText(textContent)\r\n            }\r\n          }\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <SelectItem value=\"code\" onPointerDown={formatCode}>\r\n      <div className=\"flex items-center gap-1 font-normal\">\r\n        {blockTypeToBlockName[BLOCK_FORMAT_VALUE].icon}\r\n        {blockTypeToBlockName[BLOCK_FORMAT_VALUE].label}\r\n      </div>\r\n    </SelectItem>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/block-format/format-code-block.tsx"
    },
    {
      "path": "editor/plugins/toolbar/block-format/block-format-data.tsx",
      "content": "import {\r\n  CodeIcon,\r\n  Heading1Icon,\r\n  Heading2Icon,\r\n  Heading3Icon,\r\n  ListIcon,\r\n  ListOrderedIcon,\r\n  ListTodoIcon,\r\n  QuoteIcon,\r\n  TextIcon,\r\n} from 'lucide-react'\r\n\r\nexport const blockTypeToBlockName: Record<\r\n  string,\r\n  { label: string; icon: React.ReactNode }\r\n> = {\r\n  paragraph: {\r\n    label: 'Paragraph',\r\n    icon: <TextIcon className=\"size-4\" />,\r\n  },\r\n  h1: {\r\n    label: 'Heading 1',\r\n    icon: <Heading1Icon className=\"size-4\" />,\r\n  },\r\n  h2: {\r\n    label: 'Heading 2',\r\n    icon: <Heading2Icon className=\"size-4\" />,\r\n  },\r\n  h3: {\r\n    label: 'Heading 3',\r\n    icon: <Heading3Icon className=\"size-4\" />,\r\n  },\r\n  number: {\r\n    label: 'Numbered List',\r\n    icon: <ListOrderedIcon className=\"size-4\" />,\r\n  },\r\n  bullet: {\r\n    label: 'Bulleted List',\r\n    icon: <ListIcon className=\"size-4\" />,\r\n  },\r\n  check: {\r\n    label: 'Check List',\r\n    icon: <ListTodoIcon className=\"size-4\" />,\r\n  },\r\n  code: {\r\n    label: 'Code Block',\r\n    icon: <CodeIcon className=\"size-4\" />,\r\n  },\r\n  quote: {\r\n    label: 'Quote',\r\n    icon: <QuoteIcon className=\"size-4\" />,\r\n  },\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/toolbar/block-format/block-format-data.tsx"
    }
  ]
}