{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "counter-character-plugin",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@lexical/text"
  ],
  "registryDependencies": [
    "https://shadcn-editor.vercel.app/r/actions-plugin.json"
  ],
  "files": [
    {
      "path": "editor/plugins/actions/counter-character-plugin.tsx",
      "content": "'use client'\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport { $rootTextContent } from '@lexical/text';\r\nimport { useLexicalComposerContext } from \"@lexical/react/LexicalComposerContext\";\r\n\r\nlet textEncoderInstance: null | TextEncoder = null;\r\n\r\nfunction textEncoder(): null | TextEncoder {\r\n  if (window.TextEncoder === undefined) {\r\n    return null;\r\n  }\r\n\r\n  if (textEncoderInstance === null) {\r\n    textEncoderInstance = new window.TextEncoder();\r\n  }\r\n\r\n  return textEncoderInstance;\r\n}\r\n\r\nfunction utf8Length(text: string) {\r\n  const currentTextEncoder = textEncoder();\r\n\r\n  if (currentTextEncoder === null) {\r\n    // http://stackoverflow.com/a/5515960/210370\r\n    const m = encodeURIComponent(text).match(/%[89ABab]/g);\r\n    return text.length + (m ? m.length : 0);\r\n  }\r\n\r\n  return currentTextEncoder.encode(text).length;\r\n}\r\n\r\ninterface CounterCharacterPluginProps {\r\n  charset?: 'UTF-8' | 'UTF-16'\r\n}\r\n\r\nconst strlen = (text: string, charset: 'UTF-8' | 'UTF-16') => {\r\n  if (charset === 'UTF-8') {\r\n    return utf8Length(text);\r\n  } else if (charset === 'UTF-16') {\r\n    return text.length;\r\n  }\r\n}\r\n\r\nconst countWords = (text: string) => {\r\n  return text.split(/\\s+/).filter(word => word.length > 0).length;\r\n}\r\n\r\nexport function CounterCharacterPlugin({ charset = \"UTF-16\" }: CounterCharacterPluginProps) {\r\n  const [editor] = useLexicalComposerContext();\r\n  const [stats, setStats] = useState(() => {\r\n    const initialText = editor.getEditorState().read($rootTextContent);\r\n    return {\r\n      characters: strlen(initialText, charset),\r\n      words: countWords(initialText)\r\n    };\r\n  });\r\n\r\n  useEffect(() => {\r\n    return editor.registerTextContentListener((currentText: string) => {\r\n      setStats({\r\n        characters: strlen(currentText, charset),\r\n        words: countWords(currentText)\r\n      });\r\n    });\r\n  }, [editor, charset]);\r\n\r\n  return (\r\n    <div className=\"text-xs flex gap-2 text-gray-500 whitespace-nowrap\">\r\n      <p>{stats.characters} characters</p>\r\n      |\r\n      <p>{stats.words} words</p>\r\n    </div>\r\n  );\r\n}",
      "type": "registry:component",
      "target": "components/editor/plugins/actions/counter-character-plugin.tsx"
    }
  ]
}