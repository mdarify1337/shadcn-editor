{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "floating-text-format-plugin",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@lexical/code",
    "@lexical/link",
    "@lexical/utils",
    "@lexical/selection"
  ],
  "registryDependencies": [
    "separator",
    "toggle-group",
    "https://shadcn-editor.vercel.app/r/rich-text-editor-plugin.json"
  ],
  "files": [
    {
      "path": "editor/plugins/floating-text-format-plugin.tsx",
      "content": "'use client'\r\n\r\n/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n */\r\nimport {\r\n  Dispatch,\r\n  useCallback,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n  JSX,\r\n} from 'react'\r\nimport * as React from 'react'\r\n\r\nimport { $isCodeHighlightNode } from '@lexical/code'\r\nimport { $isLinkNode, TOGGLE_LINK_COMMAND } from '@lexical/link'\r\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\r\nimport { mergeRegister } from '@lexical/utils'\r\nimport {\r\n  $getSelection,\r\n  $isParagraphNode,\r\n  $isRangeSelection,\r\n  $isTextNode,\r\n  COMMAND_PRIORITY_LOW,\r\n  FORMAT_TEXT_COMMAND,\r\n  LexicalEditor,\r\n  SELECTION_CHANGE_COMMAND,\r\n} from 'lexical'\r\nimport {\r\n  BoldIcon,\r\n  ItalicIcon,\r\n  StrikethroughIcon,\r\n  UnderlineIcon,\r\n  CodeIcon,\r\n  LinkIcon,\r\n  SubscriptIcon,\r\n  SuperscriptIcon,\r\n} from 'lucide-react'\r\nimport { createPortal } from 'react-dom'\r\n\r\nimport { Separator } from '@/registry/default/ui/separator'\r\nimport { ToggleGroup, ToggleGroupItem } from '@/registry/default/ui/toggle-group'\r\n\r\nimport { useFloatingLinkContext } from '@/registry/default/editor/context/floating-link-context'\r\nimport { getDOMRangeRect } from '@/registry/default/editor/utils/get-dom-range-rect'\r\nimport { getSelectedNode } from '@/registry/default/editor/utils/get-selected-node'\r\nimport { setFloatingElemPosition } from '@/registry/default/editor/utils/set-floating-elem-position'\r\n\r\nfunction FloatingTextFormat({\r\n  editor,\r\n  anchorElem,\r\n  isLink,\r\n  isBold,\r\n  isItalic,\r\n  isUnderline,\r\n  isCode,\r\n  isStrikethrough,\r\n  isSubscript,\r\n  isSuperscript,\r\n  setIsLinkEditMode,\r\n}: {\r\n  editor: LexicalEditor\r\n  anchorElem: HTMLElement\r\n  isBold: boolean\r\n  isCode: boolean\r\n  isItalic: boolean\r\n  isLink: boolean\r\n  isStrikethrough: boolean\r\n  isSubscript: boolean\r\n  isSuperscript: boolean\r\n  isUnderline: boolean\r\n  setIsLinkEditMode: Dispatch<boolean>\r\n}): JSX.Element {\r\n  const popupCharStylesEditorRef = useRef<HTMLDivElement | null>(null)\r\n\r\n  const insertLink = useCallback(() => {\r\n    if (!isLink) {\r\n      setIsLinkEditMode(true)\r\n      editor.dispatchCommand(TOGGLE_LINK_COMMAND, 'https://')\r\n    } else {\r\n      setIsLinkEditMode(false)\r\n      editor.dispatchCommand(TOGGLE_LINK_COMMAND, null)\r\n    }\r\n  }, [editor, isLink, setIsLinkEditMode])\r\n\r\n  function mouseMoveListener(e: MouseEvent) {\r\n    if (\r\n      popupCharStylesEditorRef?.current &&\r\n      (e.buttons === 1 || e.buttons === 3)\r\n    ) {\r\n      if (popupCharStylesEditorRef.current.style.pointerEvents !== 'none') {\r\n        const x = e.clientX\r\n        const y = e.clientY\r\n        const elementUnderMouse = document.elementFromPoint(x, y)\r\n\r\n        if (!popupCharStylesEditorRef.current.contains(elementUnderMouse)) {\r\n          // Mouse is not over the target element => not a normal click, but probably a drag\r\n          popupCharStylesEditorRef.current.style.pointerEvents = 'none'\r\n        }\r\n      }\r\n    }\r\n  }\r\n  function mouseUpListener(e: MouseEvent) {\r\n    if (popupCharStylesEditorRef?.current) {\r\n      if (popupCharStylesEditorRef.current.style.pointerEvents !== 'auto') {\r\n        popupCharStylesEditorRef.current.style.pointerEvents = 'auto'\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (popupCharStylesEditorRef?.current) {\r\n      document.addEventListener('mousemove', mouseMoveListener)\r\n      document.addEventListener('mouseup', mouseUpListener)\r\n\r\n      return () => {\r\n        document.removeEventListener('mousemove', mouseMoveListener)\r\n        document.removeEventListener('mouseup', mouseUpListener)\r\n      }\r\n    }\r\n  }, [popupCharStylesEditorRef])\r\n\r\n  const $updateTextFormatFloatingToolbar = useCallback(() => {\r\n    const selection = $getSelection()\r\n\r\n    const popupCharStylesEditorElem = popupCharStylesEditorRef.current\r\n    const nativeSelection = window.getSelection()\r\n\r\n    if (popupCharStylesEditorElem === null) {\r\n      return\r\n    }\r\n\r\n    const rootElement = editor.getRootElement()\r\n    if (\r\n      selection !== null &&\r\n      nativeSelection !== null &&\r\n      !nativeSelection.isCollapsed &&\r\n      rootElement !== null &&\r\n      rootElement.contains(nativeSelection.anchorNode)\r\n    ) {\r\n      const rangeRect = getDOMRangeRect(nativeSelection, rootElement)\r\n\r\n      setFloatingElemPosition(\r\n        rangeRect,\r\n        popupCharStylesEditorElem,\r\n        anchorElem,\r\n        isLink\r\n      )\r\n    }\r\n  }, [editor, anchorElem, isLink])\r\n\r\n  useEffect(() => {\r\n    const scrollerElem = anchorElem.parentElement\r\n\r\n    const update = () => {\r\n      editor.getEditorState().read(() => {\r\n        $updateTextFormatFloatingToolbar()\r\n      })\r\n    }\r\n\r\n    window.addEventListener('resize', update)\r\n    if (scrollerElem) {\r\n      scrollerElem.addEventListener('scroll', update)\r\n    }\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', update)\r\n      if (scrollerElem) {\r\n        scrollerElem.removeEventListener('scroll', update)\r\n      }\r\n    }\r\n  }, [editor, $updateTextFormatFloatingToolbar, anchorElem])\r\n\r\n  useEffect(() => {\r\n    editor.getEditorState().read(() => {\r\n      $updateTextFormatFloatingToolbar()\r\n    })\r\n    return mergeRegister(\r\n      editor.registerUpdateListener(({ editorState }) => {\r\n        editorState.read(() => {\r\n          $updateTextFormatFloatingToolbar()\r\n        })\r\n      }),\r\n\r\n      editor.registerCommand(\r\n        SELECTION_CHANGE_COMMAND,\r\n        () => {\r\n          $updateTextFormatFloatingToolbar()\r\n          return false\r\n        },\r\n        COMMAND_PRIORITY_LOW\r\n      )\r\n    )\r\n  }, [editor, $updateTextFormatFloatingToolbar])\r\n\r\n  return (\r\n    <div\r\n      ref={popupCharStylesEditorRef}\r\n      className=\"absolute left-0 top-0 z-10 flex gap-1 rounded-md border p-1 opacity-0 shadow-md transition-opacity duration-300 will-change-transform bg-background\"\r\n    >\r\n      {editor.isEditable() && (\r\n        <>\r\n          <ToggleGroup\r\n            type=\"multiple\"\r\n            defaultValue={[\r\n              isBold ? 'bold' : '',\r\n              isItalic ? 'italic' : '',\r\n              isUnderline ? 'underline' : '',\r\n              isStrikethrough ? 'strikethrough' : '',\r\n              isSubscript ? 'subscript' : '',\r\n              isSuperscript ? 'superscript' : '',\r\n              isCode ? 'code' : '',\r\n              isLink ? 'link' : '',\r\n            ]}\r\n          >\r\n            <ToggleGroupItem\r\n              value=\"bold\"\r\n              aria-label=\"Toggle bold\"\r\n              onClick={() => {\r\n                editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'bold')\r\n              }}\r\n              size=\"sm\"\r\n            >\r\n              <BoldIcon className=\"h-4 w-4\" />\r\n            </ToggleGroupItem>\r\n            <ToggleGroupItem\r\n              value=\"italic\"\r\n              aria-label=\"Toggle italic\"\r\n              onClick={() => {\r\n                editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'italic')\r\n              }}\r\n              size=\"sm\"\r\n            >\r\n              <ItalicIcon className=\"h-4 w-4\" />\r\n            </ToggleGroupItem>\r\n            <ToggleGroupItem\r\n              value=\"underline\"\r\n              aria-label=\"Toggle underline\"\r\n              onClick={() => {\r\n                editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'underline')\r\n              }}\r\n              size=\"sm\"\r\n            >\r\n              <UnderlineIcon className=\"h-4 w-4\" />\r\n            </ToggleGroupItem>\r\n            <ToggleGroupItem\r\n              value=\"strikethrough\"\r\n              aria-label=\"Toggle strikethrough\"\r\n              onClick={() => {\r\n                editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'strikethrough')\r\n              }}\r\n              size=\"sm\"\r\n            >\r\n              <StrikethroughIcon className=\"h-4 w-4\" />\r\n            </ToggleGroupItem>\r\n            <Separator orientation=\"vertical\" />\r\n            <ToggleGroupItem\r\n              value=\"code\"\r\n              aria-label=\"Toggle code\"\r\n              onClick={() => {\r\n                editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'code')\r\n              }}\r\n              size=\"sm\"\r\n            >\r\n              <CodeIcon className=\"h-4 w-4\" />\r\n            </ToggleGroupItem>\r\n            <ToggleGroupItem\r\n              value=\"link\"\r\n              aria-label=\"Toggle link\"\r\n              onClick={insertLink}\r\n              size=\"sm\"\r\n            >\r\n              <LinkIcon className=\"h-4 w-4\" />\r\n            </ToggleGroupItem>\r\n            <Separator orientation=\"vertical\" />\r\n          </ToggleGroup>\r\n          <ToggleGroup\r\n            type=\"single\"\r\n            defaultValue={\r\n              isSubscript ? 'subscript' : isSuperscript ? 'superscript' : ''\r\n            }\r\n          >\r\n            <ToggleGroupItem\r\n              value=\"subscript\"\r\n              aria-label=\"Toggle subscript\"\r\n              onClick={() => {\r\n                editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'subscript')\r\n              }}\r\n              size=\"sm\"\r\n            >\r\n              <SubscriptIcon className=\"h-4 w-4\" />\r\n            </ToggleGroupItem>\r\n            <ToggleGroupItem\r\n              value=\"superscript\"\r\n              aria-label=\"Toggle superscript\"\r\n              onClick={() => {\r\n                editor.dispatchCommand(FORMAT_TEXT_COMMAND, 'superscript')\r\n              }}\r\n              size=\"sm\"\r\n            >\r\n              <SuperscriptIcon className=\"h-4 w-4\" />\r\n            </ToggleGroupItem>\r\n          </ToggleGroup>\r\n        </>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction useFloatingTextFormatToolbar(\r\n  editor: LexicalEditor,\r\n  anchorElem: HTMLDivElement | null,\r\n  setIsLinkEditMode: Dispatch<boolean>\r\n): JSX.Element | null {\r\n  const [isText, setIsText] = useState(false)\r\n  const [isLink, setIsLink] = useState(false)\r\n  const [isBold, setIsBold] = useState(false)\r\n  const [isItalic, setIsItalic] = useState(false)\r\n  const [isUnderline, setIsUnderline] = useState(false)\r\n  const [isStrikethrough, setIsStrikethrough] = useState(false)\r\n  const [isSubscript, setIsSubscript] = useState(false)\r\n  const [isSuperscript, setIsSuperscript] = useState(false)\r\n  const [isCode, setIsCode] = useState(false)\r\n\r\n  const updatePopup = useCallback(() => {\r\n    editor.getEditorState().read(() => {\r\n      // Should not to pop up the floating toolbar when using IME input\r\n      if (editor.isComposing()) {\r\n        return\r\n      }\r\n      const selection = $getSelection()\r\n      const nativeSelection = window.getSelection()\r\n      const rootElement = editor.getRootElement()\r\n\r\n      if (\r\n        nativeSelection !== null &&\r\n        (!$isRangeSelection(selection) ||\r\n          rootElement === null ||\r\n          !rootElement.contains(nativeSelection.anchorNode))\r\n      ) {\r\n        setIsText(false)\r\n        return\r\n      }\r\n\r\n      if (!$isRangeSelection(selection)) {\r\n        return\r\n      }\r\n\r\n      const node = getSelectedNode(selection)\r\n\r\n      // Update text format\r\n      setIsBold(selection.hasFormat('bold'))\r\n      setIsItalic(selection.hasFormat('italic'))\r\n      setIsUnderline(selection.hasFormat('underline'))\r\n      setIsStrikethrough(selection.hasFormat('strikethrough'))\r\n      setIsSubscript(selection.hasFormat('subscript'))\r\n      setIsSuperscript(selection.hasFormat('superscript'))\r\n      setIsCode(selection.hasFormat('code'))\r\n\r\n      // Update links\r\n      const parent = node.getParent()\r\n      if ($isLinkNode(parent) || $isLinkNode(node)) {\r\n        setIsLink(true)\r\n      } else {\r\n        setIsLink(false)\r\n      }\r\n\r\n      if (\r\n        !$isCodeHighlightNode(selection.anchor.getNode()) &&\r\n        selection.getTextContent() !== ''\r\n      ) {\r\n        setIsText($isTextNode(node) || $isParagraphNode(node))\r\n      } else {\r\n        setIsText(false)\r\n      }\r\n\r\n      const rawTextContent = selection.getTextContent().replace(/\\n/g, '')\r\n      if (!selection.isCollapsed() && rawTextContent === '') {\r\n        setIsText(false)\r\n        return\r\n      }\r\n    })\r\n  }, [editor])\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('selectionchange', updatePopup)\r\n    return () => {\r\n      document.removeEventListener('selectionchange', updatePopup)\r\n    }\r\n  }, [updatePopup])\r\n\r\n  useEffect(() => {\r\n    return mergeRegister(\r\n      editor.registerUpdateListener(() => {\r\n        updatePopup()\r\n      }),\r\n      editor.registerRootListener(() => {\r\n        if (editor.getRootElement() === null) {\r\n          setIsText(false)\r\n        }\r\n      })\r\n    )\r\n  }, [editor, updatePopup])\r\n\r\n  if (!isText || !anchorElem) {\r\n    return null\r\n  }\r\n\r\n  return createPortal(\r\n    <FloatingTextFormat\r\n      editor={editor}\r\n      anchorElem={anchorElem}\r\n      isLink={isLink}\r\n      isBold={isBold}\r\n      isItalic={isItalic}\r\n      isStrikethrough={isStrikethrough}\r\n      isSubscript={isSubscript}\r\n      isSuperscript={isSuperscript}\r\n      isUnderline={isUnderline}\r\n      isCode={isCode}\r\n      setIsLinkEditMode={setIsLinkEditMode}\r\n    />,\r\n    anchorElem\r\n  )\r\n}\r\n\r\nexport function FloatingTextFormatToolbarPlugin({\r\n  anchorElem,\r\n}: {\r\n  anchorElem: HTMLDivElement | null\r\n}): JSX.Element | null {\r\n  const [editor] = useLexicalComposerContext()\r\n  const { setIsLinkEditMode } = useFloatingLinkContext()\r\n\r\n  return useFloatingTextFormatToolbar(editor, anchorElem, setIsLinkEditMode)\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/plugins/floating-text-format-plugin.tsx"
    },
    {
      "path": "editor/context/floating-link-context.tsx",
      "content": "import { createContext, useContext, useState } from 'react'\r\n\r\nconst Context = createContext<{\r\n  isLinkEditMode: boolean\r\n  setIsLinkEditMode: (isLinkEditMode: boolean) => void\r\n}>({\r\n  isLinkEditMode: false,\r\n  setIsLinkEditMode: () => {},\r\n})\r\n\r\nexport function FloatingLinkContext({\r\n  children,\r\n}: {\r\n  children: React.ReactNode\r\n}) {\r\n  const [isLinkEditMode, setIsLinkEditMode] = useState<boolean>(false)\r\n\r\n  return (\r\n    <Context.Provider value={{ isLinkEditMode, setIsLinkEditMode }}>\r\n      {children}\r\n    </Context.Provider>\r\n  )\r\n}\r\n\r\nexport function useFloatingLinkContext() {\r\n  if (!Context) {\r\n    throw new Error(\r\n      'useFloatingLinkContext must be used within a FloatingLinkContext'\r\n    )\r\n  }\r\n  return useContext(Context)\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/context/floating-link-context.tsx"
    },
    {
      "path": "editor/utils/get-dom-range-rect.ts",
      "content": "export function getDOMRangeRect(\r\n  nativeSelection: Selection,\r\n  rootElement: HTMLElement\r\n): DOMRect {\r\n  const domRange = nativeSelection.getRangeAt(0)\r\n\r\n  let rect\r\n\r\n  if (nativeSelection.anchorNode === rootElement) {\r\n    let inner = rootElement\r\n    while (inner.firstElementChild != null) {\r\n      inner = inner.firstElementChild as HTMLElement\r\n    }\r\n    rect = inner.getBoundingClientRect()\r\n  } else {\r\n    rect = domRange.getBoundingClientRect()\r\n  }\r\n\r\n  return rect\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/utils/get-dom-range-rect.ts"
    },
    {
      "path": "editor/utils/get-selected-node.ts",
      "content": "import { $isAtNodeEnd } from '@lexical/selection'\r\nimport { ElementNode, RangeSelection, TextNode } from 'lexical'\r\n\r\nexport function getSelectedNode(\r\n  selection: RangeSelection\r\n): TextNode | ElementNode {\r\n  const anchor = selection.anchor\r\n  const focus = selection.focus\r\n  const anchorNode = selection.anchor.getNode()\r\n  const focusNode = selection.focus.getNode()\r\n  if (anchorNode === focusNode) {\r\n    return anchorNode\r\n  }\r\n  const isBackward = selection.isBackward()\r\n  if (isBackward) {\r\n    return $isAtNodeEnd(focus) ? anchorNode : focusNode\r\n  } else {\r\n    return $isAtNodeEnd(anchor) ? anchorNode : focusNode\r\n  }\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/utils/get-selected-node.ts"
    },
    {
      "path": "editor/utils/set-floating-elem-position.ts",
      "content": "const VERTICAL_GAP = 10\r\nconst HORIZONTAL_OFFSET = 5\r\n\r\nexport function setFloatingElemPosition(\r\n  targetRect: DOMRect | null,\r\n  floatingElem: HTMLElement,\r\n  anchorElem: HTMLElement,\r\n  isLink: boolean = false,\r\n  verticalGap: number = VERTICAL_GAP,\r\n  horizontalOffset: number = HORIZONTAL_OFFSET\r\n): void {\r\n  const scrollerElem = anchorElem.parentElement\r\n\r\n  if (targetRect === null || !scrollerElem) {\r\n    floatingElem.style.opacity = '0'\r\n    floatingElem.style.transform = 'translate(-10000px, -10000px)'\r\n    return\r\n  }\r\n\r\n  const floatingElemRect = floatingElem.getBoundingClientRect()\r\n  const anchorElementRect = anchorElem.getBoundingClientRect()\r\n  const editorScrollerRect = scrollerElem.getBoundingClientRect()\r\n\r\n  let top = targetRect.top - floatingElemRect.height - verticalGap\r\n  let left = targetRect.left - horizontalOffset\r\n\r\n  if (top < editorScrollerRect.top) {\r\n    // adjusted height for link element if the element is at top\r\n    top +=\r\n      floatingElemRect.height +\r\n      targetRect.height +\r\n      verticalGap * (isLink ? 9 : 2)\r\n  }\r\n\r\n  if (left + floatingElemRect.width > editorScrollerRect.right) {\r\n    left = editorScrollerRect.right - floatingElemRect.width - horizontalOffset\r\n  }\r\n\r\n  top -= anchorElementRect.top\r\n  left -= anchorElementRect.left\r\n\r\n  floatingElem.style.opacity = '1'\r\n  floatingElem.style.transform = `translate(${left}px, ${top}px)`\r\n}\r\n",
      "type": "registry:component",
      "target": "components/editor/utils/set-floating-elem-position.ts"
    }
  ]
}